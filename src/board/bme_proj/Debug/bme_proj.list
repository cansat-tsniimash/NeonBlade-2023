
bme_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003894  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003a2c  08003a2c  00013a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a3c  08003a3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a44  08003a44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a44  08003a44  00013a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a48  08003a48  00013a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08003a58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003a58  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f67d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f15  00000000  00000000  0002f6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  000315d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00032378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001812a  00000000  00000000  00033028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f050  00000000  00000000  0004b152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009abcb  00000000  00000000  0005a1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4d6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000391c  00000000  00000000  000f4dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003a14 	.word	0x08003a14

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003a14 	.word	0x08003a14

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <app_main>:




int app_main()
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b09c      	sub	sp, #112	; 0x70
 80004d4:	af00      	add	r7, sp, #0

	packet_ma_type_1_t packet_ma_type_1 = {1};
 80004d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004da:	2220      	movs	r2, #32
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f003 fa90 	bl	8003a04 <memset>
 80004e4:	2301      	movs	r3, #1
 80004e6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	lsmset(&ctx, &lsm_spi);*/

	//Создаем и настраиваем дескриптор радиомодуля nRF24L01
	nrf24_spi_pins_t nrf24_spi_pins;
	nrf24_spi_pins.ce_pin = GPIO_PIN_9;
 80004ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	nrf24_spi_pins.ce_port = GPIOB;
 80004f2:	4b8b      	ldr	r3, [pc, #556]	; (8000720 <app_main+0x250>)
 80004f4:	643b      	str	r3, [r7, #64]	; 0x40
	nrf24_spi_pins.cs_pin = GPIO_PIN_8;
 80004f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004fa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	nrf24_spi_pins.cs_port = GPIOB;
 80004fe:	4b88      	ldr	r3, [pc, #544]	; (8000720 <app_main+0x250>)
 8000500:	64bb      	str	r3, [r7, #72]	; 0x48
	nrf24_lower_api_config_t nrf24_api_config;
	nrf24_spi_init(&nrf24_api_config, &hspi2, &nrf24_spi_pins);
 8000502:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800050a:	4986      	ldr	r1, [pc, #536]	; (8000724 <app_main+0x254>)
 800050c:	4618      	mov	r0, r3
 800050e:	f002 ff65 	bl	80033dc <nrf24_spi_init>

	//Перед настройкой регистров радио переводим его в standby mode
	nrf24_mode_standby(&nrf24_api_config);
 8000512:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000516:	4618      	mov	r0, r3
 8000518:	f003 f95d 	bl	80037d6 <nrf24_mode_standby>

	// Настраиваем параметры радиопередачи
	nrf24_rf_config_t nrf24_rf_config;
	nrf24_rf_config.data_rate = NRF24_DATARATE_2000_KBIT;
 800051c:	2302      	movs	r3, #2
 800051e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	nrf24_rf_config.rf_channel = 100;
 8000522:	2364      	movs	r3, #100	; 0x64
 8000524:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	nrf24_rf_config.tx_power = NRF24_TXPOWER_MINUS_0_DBM;
 8000528:	2303      	movs	r3, #3
 800052a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	nrf24_setup_rf(&nrf24_api_config, &nrf24_rf_config);
 800052e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000532:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000536:	4611      	mov	r1, r2
 8000538:	4618      	mov	r0, r3
 800053a:	f002 ff6b 	bl	8003414 <nrf24_setup_rf>

	// Настраиваем протокол радиопередачи
	nrf24_protocol_config_t nrf24_protocol_config;
	nrf24_protocol_config.address_width = NRF24_ADDRES_WIDTH_5_BYTES;
 800053e:	2303      	movs	r3, #3
 8000540:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	nrf24_protocol_config.auto_retransmit_count = 15;
 8000544:	230f      	movs	r3, #15
 8000546:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	nrf24_protocol_config.auto_retransmit_delay = 15;
 800054a:	230f      	movs	r3, #15
 800054c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	nrf24_protocol_config.crc_size = NRF24_CRCSIZE_1BYTE;
 8000550:	2301      	movs	r3, #1
 8000552:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	nrf24_protocol_config.en_ack_payload = true;
 8000556:	2301      	movs	r3, #1
 8000558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	nrf24_protocol_config.en_dyn_ack = false;
 800055c:	2300      	movs	r3, #0
 800055e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	nrf24_protocol_config.en_dyn_payload_size = false;
 8000562:	2300      	movs	r3, #0
 8000564:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	nrf24_setup_protocol(&nrf24_api_config, &nrf24_protocol_config);
 8000568:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800056c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000570:	4611      	mov	r1, r2
 8000572:	4618      	mov	r0, r3
 8000574:	f002 ffb0 	bl	80034d8 <nrf24_setup_protocol>


	//Настраиваем пайпы 0 - 2 для приема
	nrf24_pipe_config_t pipe_config;
	pipe_config.enable_auto_ack = true;
 8000578:	2301      	movs	r3, #1
 800057a:	723b      	strb	r3, [r7, #8]
	pipe_config.payload_size = 32;
 800057c:	2320      	movs	r3, #32
 800057e:	763b      	strb	r3, [r7, #24]
	pipe_config.address = DA1_NRF_ADDR;
 8000580:	f04f 32cf 	mov.w	r2, #3486502863	; 0xcfcfcfcf
 8000584:	f04f 03cf 	mov.w	r3, #207	; 0xcf
 8000588:	e9c7 2304 	strd	r2, r3, [r7, #16]
	nrf24_pipe_rx_start(&nrf24_api_config, 0, &pipe_config);
 800058c:	f107 0208 	add.w	r2, r7, #8
 8000590:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 f822 	bl	80035e0 <nrf24_pipe_rx_start>

	pipe_config.address = DA2_NRF_ADDR;
 800059c:	a35c      	add	r3, pc, #368	; (adr r3, 8000710 <app_main+0x240>)
 800059e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	nrf24_pipe_rx_start(&nrf24_api_config, 1, &pipe_config);
 80005a6:	f107 0208 	add.w	r2, r7, #8
 80005aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ae:	2101      	movs	r1, #1
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 f815 	bl	80035e0 <nrf24_pipe_rx_start>

	pipe_config.address = DA3_NRF_ADDR;
 80005b6:	a358      	add	r3, pc, #352	; (adr r3, 8000718 <app_main+0x248>)
 80005b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	nrf24_pipe_rx_start(&nrf24_api_config, 2, &pipe_config);
 80005c0:	f107 0208 	add.w	r2, r7, #8
 80005c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005c8:	2102      	movs	r1, #2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 f808 	bl	80035e0 <nrf24_pipe_rx_start>

//	uint8_t rx_buffer[32] = {0};
//	uint8_t tx_buffer[32] = {0};


    nrf24_irq_clear(&nrf24_api_config, NRF24_IRQ_TX_DR | NRF24_IRQ_RX_DR |NRF24_IRQ_MAX_RT);
 80005d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005d4:	2107      	movs	r1, #7
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 f9d8 	bl	800398c <nrf24_irq_clear>
    nrf24_fifo_flush_rx(&nrf24_api_config);
 80005dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 f9ae 	bl	8003942 <nrf24_fifo_flush_rx>
    nrf24_fifo_flush_tx(&nrf24_api_config);
 80005e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 f99d 	bl	800392a <nrf24_fifo_flush_tx>

    //Переводим радио в режим передачи
	nrf24_mode_tx(&nrf24_api_config);
 80005f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 f910 	bl	800381a <nrf24_mode_tx>
	nrf24_fifo_flush_tx(&nrf24_api_config);
 80005fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 f993 	bl	800392a <nrf24_fifo_flush_tx>
	nrf24_pipe_set_tx_addr(&nrf24_api_config, DA1_NRF_ADDR);
 8000604:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000608:	f04f 32cf 	mov.w	r2, #3486502863	; 0xcfcfcfcf
 800060c:	f04f 03cf 	mov.w	r3, #207	; 0xcf
 8000610:	4608      	mov	r0, r1
 8000612:	f003 f8cf 	bl	80037b4 <nrf24_pipe_set_tx_addr>
	nrf24_fifo_write(&nrf24_api_config, (uint8_t *)&packet_ma_type_1, sizeof(packet_ma_type_1), true);
 8000616:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800061a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800061e:	2301      	movs	r3, #1
 8000620:	2220      	movs	r2, #32
 8000622:	f003 f95c 	bl	80038de <nrf24_fifo_write>

	int IRQ_flags;
	nrf24_fifo_status_t rx_status = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	70fb      	strb	r3, [r7, #3]
    nrf24_fifo_status_t tx_status = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	70bb      	strb	r3, [r7, #2]

	while(1)
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000634:	483c      	ldr	r0, [pc, #240]	; (8000728 <app_main+0x258>)
 8000636:	f001 f8e7 	bl	8001808 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800063a:	2064      	movs	r0, #100	; 0x64
 800063c:	f000 fbe4 	bl	8000e08 <HAL_Delay>
		nrf24_irq_get(&nrf24_api_config, &IRQ_flags);
 8000640:	1d3a      	adds	r2, r7, #4
 8000642:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000646:	4611      	mov	r1, r2
 8000648:	4618      	mov	r0, r3
 800064a:	f003 f986 	bl	800395a <nrf24_irq_get>
		if((IRQ_flags & NRF24_IRQ_TX_DR) != 0)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f003 0302 	and.w	r3, r3, #2
 8000654:	2b00      	cmp	r3, #0
 8000656:	d02f      	beq.n	80006b8 <app_main+0x1e8>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065e:	4832      	ldr	r0, [pc, #200]	; (8000728 <app_main+0x258>)
 8000660:	f001 f8d2 	bl	8001808 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000664:	2064      	movs	r0, #100	; 0x64
 8000666:	f000 fbcf 	bl	8000e08 <HAL_Delay>
			nrf24_irq_clear(&nrf24_api_config, NRF24_IRQ_TX_DR);
 800066a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800066e:	2102      	movs	r1, #2
 8000670:	4618      	mov	r0, r3
 8000672:	f003 f98b 	bl	800398c <nrf24_irq_clear>
			nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8000676:	1cba      	adds	r2, r7, #2
 8000678:	1cf9      	adds	r1, r7, #3
 800067a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800067e:	4618      	mov	r0, r3
 8000680:	f003 f8ed 	bl	800385e <nrf24_fifo_status>
			nrf24_fifo_flush_tx(&nrf24_api_config);
 8000684:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000688:	4618      	mov	r0, r3
 800068a:	f003 f94e 	bl	800392a <nrf24_fifo_flush_tx>
			nrf24_fifo_flush_rx(&nrf24_api_config);
 800068e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000692:	4618      	mov	r0, r3
 8000694:	f003 f955 	bl	8003942 <nrf24_fifo_flush_rx>
			nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 8000698:	1cba      	adds	r2, r7, #2
 800069a:	1cf9      	adds	r1, r7, #3
 800069c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 f8dc 	bl	800385e <nrf24_fifo_status>
			nrf24_fifo_write(&nrf24_api_config, (uint8_t *)&packet_ma_type_1, sizeof(packet_ma_type_1), true);
 80006a6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80006aa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80006ae:	2301      	movs	r3, #1
 80006b0:	2220      	movs	r2, #32
 80006b2:	f003 f914 	bl	80038de <nrf24_fifo_write>
 80006b6:	e7ba      	b.n	800062e <app_main+0x15e>
		}
		else if (IRQ_flags & NRF24_IRQ_MAX_RT)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0b5      	beq.n	800062e <app_main+0x15e>
		{
			nrf24_irq_clear(&nrf24_api_config, NRF24_IRQ_MAX_RT);
 80006c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006c6:	2101      	movs	r1, #1
 80006c8:	4618      	mov	r0, r3
 80006ca:	f003 f95f 	bl	800398c <nrf24_irq_clear>
			nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 80006ce:	1cba      	adds	r2, r7, #2
 80006d0:	1cf9      	adds	r1, r7, #3
 80006d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 f8c1 	bl	800385e <nrf24_fifo_status>
			nrf24_fifo_flush_tx(&nrf24_api_config);
 80006dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 f922 	bl	800392a <nrf24_fifo_flush_tx>
			nrf24_fifo_flush_rx(&nrf24_api_config);
 80006e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 f929 	bl	8003942 <nrf24_fifo_flush_rx>
			nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 80006f0:	1cba      	adds	r2, r7, #2
 80006f2:	1cf9      	adds	r1, r7, #3
 80006f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 f8b0 	bl	800385e <nrf24_fifo_status>
			nrf24_fifo_write(&nrf24_api_config, (uint8_t *)&packet_ma_type_1, sizeof(packet_ma_type_1), true);
 80006fe:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000702:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000706:	2301      	movs	r3, #1
 8000708:	2220      	movs	r2, #32
 800070a:	f003 f8e8 	bl	80038de <nrf24_fifo_write>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800070e:	e78e      	b.n	800062e <app_main+0x15e>
 8000710:	cfcfcfd0 	.word	0xcfcfcfd0
 8000714:	000000cf 	.word	0x000000cf
 8000718:	cfcfcfd1 	.word	0xcfcfcfd1
 800071c:	000000cf 	.word	0x000000cf
 8000720:	40020400 	.word	0x40020400
 8000724:	20000028 	.word	0x20000028
 8000728:	40020800 	.word	0x40020800

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000730:	f000 faf8 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000734:	f000 f80c 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000738:	f000 f948 	bl	80009cc <MX_GPIO_Init>
  MX_SPI2_Init();
 800073c:	f000 f8c2 	bl	80008c4 <MX_SPI2_Init>
  MX_ADC1_Init();
 8000740:	f000 f86e 	bl	8000820 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000744:	f000 f8f4 	bl	8000930 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 8000748:	f7ff fec2 	bl	80004d0 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800074c:	e7fe      	b.n	800074c <main+0x20>
	...

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	; 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	2230      	movs	r2, #48	; 0x30
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f003 f950 	bl	8003a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <SystemClock_Config+0xc8>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	4a26      	ldr	r2, [pc, #152]	; (8000818 <SystemClock_Config+0xc8>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	; 0x40
 8000784:	4b24      	ldr	r3, [pc, #144]	; (8000818 <SystemClock_Config+0xc8>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b21      	ldr	r3, [pc, #132]	; (800081c <SystemClock_Config+0xcc>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a20      	ldr	r2, [pc, #128]	; (800081c <SystemClock_Config+0xcc>)
 800079a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b1e      	ldr	r3, [pc, #120]	; (800081c <SystemClock_Config+0xcc>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ac:	2302      	movs	r3, #2
 80007ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b4:	2310      	movs	r3, #16
 80007b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b8:	2302      	movs	r3, #2
 80007ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007bc:	2300      	movs	r3, #0
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007c0:	2308      	movs	r3, #8
 80007c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 74;
 80007c4:	234a      	movs	r3, #74	; 0x4a
 80007c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007cc:	2304      	movs	r3, #4
 80007ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 f831 	bl	800183c <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e0:	f000 f95e 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	230f      	movs	r3, #15
 80007e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e8:	2302      	movs	r3, #2
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2102      	movs	r1, #2
 8000800:	4618      	mov	r0, r3
 8000802:	f001 fa93 	bl	8001d2c <HAL_RCC_ClockConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800080c:	f000 f948 	bl	8000aa0 <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	3750      	adds	r7, #80	; 0x50
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000826:	463b      	mov	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_ADC1_Init+0x98>)
 8000834:	4a21      	ldr	r2, [pc, #132]	; (80008bc <MX_ADC1_Init+0x9c>)
 8000836:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_ADC1_Init+0x98>)
 800083a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800083e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_ADC1_Init+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_ADC1_Init+0x98>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_ADC1_Init+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_ADC1_Init+0x98>)
 8000854:	2200      	movs	r2, #0
 8000856:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_ADC1_Init+0x98>)
 800085c:	2200      	movs	r2, #0
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_ADC1_Init+0x98>)
 8000862:	4a17      	ldr	r2, [pc, #92]	; (80008c0 <MX_ADC1_Init+0xa0>)
 8000864:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_ADC1_Init+0x98>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_ADC1_Init+0x98>)
 800086e:	2201      	movs	r2, #1
 8000870:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_ADC1_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_ADC1_Init+0x98>)
 800087c:	2201      	movs	r2, #1
 800087e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_ADC1_Init+0x98>)
 8000882:	f000 fae5 	bl	8000e50 <HAL_ADC_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800088c:	f000 f908 	bl	8000aa0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000890:	2307      	movs	r3, #7
 8000892:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_ADC1_Init+0x98>)
 80008a2:	f000 fb19 	bl	8000ed8 <HAL_ADC_ConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008ac:	f000 f8f8 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200000c8 	.word	0x200000c8
 80008bc:	40012000 	.word	0x40012000
 80008c0:	0f000001 	.word	0x0f000001

080008c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_SPI2_Init+0x64>)
 80008ca:	4a18      	ldr	r2, [pc, #96]	; (800092c <MX_SPI2_Init+0x68>)
 80008cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_SPI2_Init+0x64>)
 80008d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_SPI2_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_SPI2_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_SPI2_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_SPI2_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_SPI2_Init+0x64>)
 80008f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_SPI2_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <MX_SPI2_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_SPI2_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <MX_SPI2_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_SPI2_Init+0x64>)
 8000910:	220a      	movs	r2, #10
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_SPI2_Init+0x64>)
 8000916:	f001 fbcf 	bl	80020b8 <HAL_SPI_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000920:	f000 f8be 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000028 	.word	0x20000028
 800092c:	40003800 	.word	0x40003800

08000930 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	463b      	mov	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <MX_TIM4_Init+0x94>)
 800094e:	4a1e      	ldr	r2, [pc, #120]	; (80009c8 <MX_TIM4_Init+0x98>)
 8000950:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_TIM4_Init+0x94>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_TIM4_Init+0x94>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_TIM4_Init+0x94>)
 8000960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000964:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_TIM4_Init+0x94>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_TIM4_Init+0x94>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000972:	4814      	ldr	r0, [pc, #80]	; (80009c4 <MX_TIM4_Init+0x94>)
 8000974:	f002 f948 	bl	8002c08 <HAL_TIM_Base_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800097e:	f000 f88f 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000986:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	4619      	mov	r1, r3
 800098e:	480d      	ldr	r0, [pc, #52]	; (80009c4 <MX_TIM4_Init+0x94>)
 8000990:	f002 f989 	bl	8002ca6 <HAL_TIM_ConfigClockSource>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800099a:	f000 f881 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	4806      	ldr	r0, [pc, #24]	; (80009c4 <MX_TIM4_Init+0x94>)
 80009ac:	f002 fb5c 	bl	8003068 <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80009b6:	f000 f873 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000080 	.word	0x20000080
 80009c8:	40000800 	.word	0x40000800

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <MX_GPIO_Init+0xc8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a2a      	ldr	r2, [pc, #168]	; (8000a94 <MX_GPIO_Init+0xc8>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <MX_GPIO_Init+0xc8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <MX_GPIO_Init+0xc8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <MX_GPIO_Init+0xc8>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_GPIO_Init+0xc8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <MX_GPIO_Init+0xc8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <MX_GPIO_Init+0xc8>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_GPIO_Init+0xc8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LIS_CS_Pin|LSM_CS_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000a3c:	4816      	ldr	r0, [pc, #88]	; (8000a98 <MX_GPIO_Init+0xcc>)
 8000a3e:	f000 fee3 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_NRF_Pin|CE_NRF_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000a48:	4814      	ldr	r0, [pc, #80]	; (8000a9c <MX_GPIO_Init+0xd0>)
 8000a4a:	f000 fedd 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LIS_CS_Pin LSM_CS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LIS_CS_Pin|LSM_CS_Pin;
 8000a4e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	4619      	mov	r1, r3
 8000a66:	480c      	ldr	r0, [pc, #48]	; (8000a98 <MX_GPIO_Init+0xcc>)
 8000a68:	f000 fd4a 	bl	8001500 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_NRF_Pin CE_NRF_Pin */
  GPIO_InitStruct.Pin = CS_NRF_Pin|CE_NRF_Pin;
 8000a6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_GPIO_Init+0xd0>)
 8000a86:	f000 fd3b 	bl	8001500 <HAL_GPIO_Init>

}
 8000a8a:	bf00      	nop
 8000a8c:	3720      	adds	r7, #32
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	40020400 	.word	0x40020400

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <HAL_MspInit+0x4c>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x7c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d127      	bne.n	8000b6e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_ADC_MspInit+0x80>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b56:	2380      	movs	r3, #128	; 0x80
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <HAL_ADC_MspInit+0x84>)
 8000b6a:	f000 fcc9 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40012000 	.word	0x40012000
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a19      	ldr	r2, [pc, #100]	; (8000c08 <HAL_SPI_MspInit+0x84>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d12c      	bne.n	8000c00 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_SPI_MspInit+0x88>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <HAL_SPI_MspInit+0x88>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_SPI_MspInit+0x88>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_SPI_MspInit+0x88>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <HAL_SPI_MspInit+0x88>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_SPI_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000bde:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <HAL_SPI_MspInit+0x8c>)
 8000bfc:	f000 fc80 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	; 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40003800 	.word	0x40003800
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020400 	.word	0x40020400

08000c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <HAL_TIM_Base_MspInit+0x3c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d10d      	bne.n	8000c42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_TIM_Base_MspInit+0x40>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a09      	ldr	r2, [pc, #36]	; (8000c54 <HAL_TIM_Base_MspInit+0x40>)
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <HAL_TIM_Base_MspInit+0x40>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c42:	bf00      	nop
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40000800 	.word	0x40000800
 8000c54:	40023800 	.word	0x40023800

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca4:	f000 f890 	bl	8000dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cd6:	490e      	ldr	r1, [pc, #56]	; (8000d10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cec:	4c0b      	ldr	r4, [pc, #44]	; (8000d1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cfa:	f7ff ffd7 	bl	8000cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f002 fe5d 	bl	80039bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d02:	f7ff fd13 	bl	800072c <main>
  bx  lr    
 8000d06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d14:	08003a4c 	.word	0x08003a4c
  ldr r2, =_sbss
 8000d18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d1c:	20000114 	.word	0x20000114

08000d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC_IRQHandler>
	...

08000d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <HAL_Init+0x40>)
 8000d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_Init+0x40>)
 8000d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_Init+0x40>)
 8000d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 fba3 	bl	8001498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d52:	200f      	movs	r0, #15
 8000d54:	f000 f808 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f7ff fea8 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023c00 	.word	0x40023c00

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x54>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x58>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 fbad 	bl	80014e6 <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00e      	b.n	8000db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d80a      	bhi.n	8000db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 fb83 	bl	80014ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <HAL_InitTick+0x5c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000110 	.word	0x20000110

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000110 	.word	0x20000110

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff ffee 	bl	8000df0 <HAL_GetTick>
 8000e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d005      	beq.n	8000e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_Delay+0x44>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e2e:	bf00      	nop
 8000e30:	f7ff ffde 	bl	8000df0 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d8f7      	bhi.n	8000e30 <HAL_Delay+0x28>
  {
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008

08000e50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e033      	b.n	8000ece <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d109      	bne.n	8000e82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff fe44 	bl	8000afc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f003 0310 	and.w	r3, r3, #16
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d118      	bne.n	8000ec0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e96:	f023 0302 	bic.w	r3, r3, #2
 8000e9a:	f043 0202 	orr.w	r2, r3, #2
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f94a 	bl	800113c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f023 0303 	bic.w	r3, r3, #3
 8000eb6:	f043 0201 	orr.w	r2, r3, #1
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	641a      	str	r2, [r3, #64]	; 0x40
 8000ebe:	e001      	b.n	8000ec4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d101      	bne.n	8000ef4 <HAL_ADC_ConfigChannel+0x1c>
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	e113      	b.n	800111c <HAL_ADC_ConfigChannel+0x244>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b09      	cmp	r3, #9
 8000f02:	d925      	bls.n	8000f50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68d9      	ldr	r1, [r3, #12]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	461a      	mov	r2, r3
 8000f12:	4613      	mov	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4413      	add	r3, r2
 8000f18:	3b1e      	subs	r3, #30
 8000f1a:	2207      	movs	r2, #7
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43da      	mvns	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	400a      	ands	r2, r1
 8000f28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68d9      	ldr	r1, [r3, #12]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4403      	add	r3, r0
 8000f42:	3b1e      	subs	r3, #30
 8000f44:	409a      	lsls	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	e022      	b.n	8000f96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6919      	ldr	r1, [r3, #16]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	2207      	movs	r2, #7
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	400a      	ands	r2, r1
 8000f72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6919      	ldr	r1, [r3, #16]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	4618      	mov	r0, r3
 8000f86:	4603      	mov	r3, r0
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4403      	add	r3, r0
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d824      	bhi.n	8000fe8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	3b05      	subs	r3, #5
 8000fb0:	221f      	movs	r2, #31
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	400a      	ands	r2, r1
 8000fbe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3b05      	subs	r3, #5
 8000fda:	fa00 f203 	lsl.w	r2, r0, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	635a      	str	r2, [r3, #52]	; 0x34
 8000fe6:	e04c      	b.n	8001082 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b0c      	cmp	r3, #12
 8000fee:	d824      	bhi.n	800103a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	3b23      	subs	r3, #35	; 0x23
 8001002:	221f      	movs	r2, #31
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43da      	mvns	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	400a      	ands	r2, r1
 8001010:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	b29b      	uxth	r3, r3
 800101e:	4618      	mov	r0, r3
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	3b23      	subs	r3, #35	; 0x23
 800102c:	fa00 f203 	lsl.w	r2, r0, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	430a      	orrs	r2, r1
 8001036:	631a      	str	r2, [r3, #48]	; 0x30
 8001038:	e023      	b.n	8001082 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	3b41      	subs	r3, #65	; 0x41
 800104c:	221f      	movs	r2, #31
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	400a      	ands	r2, r1
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	4618      	mov	r0, r3
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	3b41      	subs	r3, #65	; 0x41
 8001076:	fa00 f203 	lsl.w	r2, r0, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	430a      	orrs	r2, r1
 8001080:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001082:	4b29      	ldr	r3, [pc, #164]	; (8001128 <HAL_ADC_ConfigChannel+0x250>)
 8001084:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a28      	ldr	r2, [pc, #160]	; (800112c <HAL_ADC_ConfigChannel+0x254>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d10f      	bne.n	80010b0 <HAL_ADC_ConfigChannel+0x1d8>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b12      	cmp	r3, #18
 8001096:	d10b      	bne.n	80010b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a1d      	ldr	r2, [pc, #116]	; (800112c <HAL_ADC_ConfigChannel+0x254>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d12b      	bne.n	8001112 <HAL_ADC_ConfigChannel+0x23a>
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a1c      	ldr	r2, [pc, #112]	; (8001130 <HAL_ADC_ConfigChannel+0x258>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d003      	beq.n	80010cc <HAL_ADC_ConfigChannel+0x1f4>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b11      	cmp	r3, #17
 80010ca:	d122      	bne.n	8001112 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a11      	ldr	r2, [pc, #68]	; (8001130 <HAL_ADC_ConfigChannel+0x258>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d111      	bne.n	8001112 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_ADC_ConfigChannel+0x25c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a11      	ldr	r2, [pc, #68]	; (8001138 <HAL_ADC_ConfigChannel+0x260>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	0c9a      	lsrs	r2, r3, #18
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001104:	e002      	b.n	800110c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	3b01      	subs	r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f9      	bne.n	8001106 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	40012300 	.word	0x40012300
 800112c:	40012000 	.word	0x40012000
 8001130:	10000012 	.word	0x10000012
 8001134:	20000000 	.word	0x20000000
 8001138:	431bde83 	.word	0x431bde83

0800113c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001144:	4b79      	ldr	r3, [pc, #484]	; (800132c <ADC_Init+0x1f0>)
 8001146:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	431a      	orrs	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001170:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6859      	ldr	r1, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	021a      	lsls	r2, r3, #8
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	430a      	orrs	r2, r1
 8001184:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001194:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6859      	ldr	r1, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6899      	ldr	r1, [r3, #8]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68da      	ldr	r2, [r3, #12]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ce:	4a58      	ldr	r2, [pc, #352]	; (8001330 <ADC_Init+0x1f4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d022      	beq.n	800121a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6899      	ldr	r1, [r3, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001204:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6899      	ldr	r1, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	e00f      	b.n	800123a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001228:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001238:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0202 	bic.w	r2, r2, #2
 8001248:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6899      	ldr	r1, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7e1b      	ldrb	r3, [r3, #24]
 8001254:	005a      	lsls	r2, r3, #1
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d01b      	beq.n	80012a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001276:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001286:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6859      	ldr	r1, [r3, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	3b01      	subs	r3, #1
 8001294:	035a      	lsls	r2, r3, #13
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	e007      	b.n	80012b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80012be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	051a      	lsls	r2, r3, #20
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6899      	ldr	r1, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012f2:	025a      	lsls	r2, r3, #9
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800130a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6899      	ldr	r1, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	029a      	lsls	r2, r3, #10
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	609a      	str	r2, [r3, #8]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40012300 	.word	0x40012300
 8001330:	0f000001 	.word	0x0f000001

08001334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001350:	4013      	ands	r3, r2
 8001352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800135c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001366:	4a04      	ldr	r2, [pc, #16]	; (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	60d3      	str	r3, [r2, #12]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <__NVIC_GetPriorityGrouping+0x18>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	f003 0307 	and.w	r3, r3, #7
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	; (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	; (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f1c3 0307 	rsb	r3, r3, #7
 8001406:	2b04      	cmp	r3, #4
 8001408:	bf28      	it	cs
 800140a:	2304      	movcs	r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3304      	adds	r3, #4
 8001412:	2b06      	cmp	r3, #6
 8001414:	d902      	bls.n	800141c <NVIC_EncodePriority+0x30>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3b03      	subs	r3, #3
 800141a:	e000      	b.n	800141e <NVIC_EncodePriority+0x32>
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	f04f 32ff 	mov.w	r2, #4294967295
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	401a      	ands	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001434:	f04f 31ff 	mov.w	r1, #4294967295
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43d9      	mvns	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	4313      	orrs	r3, r2
         );
}
 8001446:	4618      	mov	r0, r3
 8001448:	3724      	adds	r7, #36	; 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001464:	d301      	bcc.n	800146a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001466:	2301      	movs	r3, #1
 8001468:	e00f      	b.n	800148a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <SysTick_Config+0x40>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001472:	210f      	movs	r1, #15
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f7ff ff8e 	bl	8001398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <SysTick_Config+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <SysTick_Config+0x40>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff47 	bl	8001334 <__NVIC_SetPriorityGrouping>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c0:	f7ff ff5c 	bl	800137c <__NVIC_GetPriorityGrouping>
 80014c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	6978      	ldr	r0, [r7, #20]
 80014cc:	f7ff ff8e 	bl	80013ec <NVIC_EncodePriority>
 80014d0:	4602      	mov	r2, r0
 80014d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff5d 	bl	8001398 <__NVIC_SetPriority>
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffb0 	bl	8001454 <SysTick_Config>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	e159      	b.n	80017d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800151c:	2201      	movs	r2, #1
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	429a      	cmp	r2, r3
 8001536:	f040 8148 	bne.w	80017ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b01      	cmp	r3, #1
 8001544:	d005      	beq.n	8001552 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154e:	2b02      	cmp	r3, #2
 8001550:	d130      	bne.n	80015b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	2203      	movs	r2, #3
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001588:	2201      	movs	r2, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	f003 0201 	and.w	r2, r3, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d017      	beq.n	80015f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d123      	bne.n	8001644 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	08da      	lsrs	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	220f      	movs	r2, #15
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	08da      	lsrs	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3208      	adds	r2, #8
 800163e:	69b9      	ldr	r1, [r7, #24]
 8001640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0203 	and.w	r2, r3, #3
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80a2 	beq.w	80017ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b57      	ldr	r3, [pc, #348]	; (80017e8 <HAL_GPIO_Init+0x2e8>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a56      	ldr	r2, [pc, #344]	; (80017e8 <HAL_GPIO_Init+0x2e8>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b54      	ldr	r3, [pc, #336]	; (80017e8 <HAL_GPIO_Init+0x2e8>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016a2:	4a52      	ldr	r2, [pc, #328]	; (80017ec <HAL_GPIO_Init+0x2ec>)
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3302      	adds	r3, #2
 80016aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	220f      	movs	r2, #15
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a49      	ldr	r2, [pc, #292]	; (80017f0 <HAL_GPIO_Init+0x2f0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d019      	beq.n	8001702 <HAL_GPIO_Init+0x202>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a48      	ldr	r2, [pc, #288]	; (80017f4 <HAL_GPIO_Init+0x2f4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_GPIO_Init+0x1fe>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a47      	ldr	r2, [pc, #284]	; (80017f8 <HAL_GPIO_Init+0x2f8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d00d      	beq.n	80016fa <HAL_GPIO_Init+0x1fa>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a46      	ldr	r2, [pc, #280]	; (80017fc <HAL_GPIO_Init+0x2fc>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d007      	beq.n	80016f6 <HAL_GPIO_Init+0x1f6>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a45      	ldr	r2, [pc, #276]	; (8001800 <HAL_GPIO_Init+0x300>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_GPIO_Init+0x1f2>
 80016ee:	2304      	movs	r3, #4
 80016f0:	e008      	b.n	8001704 <HAL_GPIO_Init+0x204>
 80016f2:	2307      	movs	r3, #7
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x204>
 80016f6:	2303      	movs	r3, #3
 80016f8:	e004      	b.n	8001704 <HAL_GPIO_Init+0x204>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e002      	b.n	8001704 <HAL_GPIO_Init+0x204>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <HAL_GPIO_Init+0x204>
 8001702:	2300      	movs	r3, #0
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	f002 0203 	and.w	r2, r2, #3
 800170a:	0092      	lsls	r2, r2, #2
 800170c:	4093      	lsls	r3, r2
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001714:	4935      	ldr	r1, [pc, #212]	; (80017ec <HAL_GPIO_Init+0x2ec>)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	3302      	adds	r3, #2
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001722:	4b38      	ldr	r3, [pc, #224]	; (8001804 <HAL_GPIO_Init+0x304>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001746:	4a2f      	ldr	r2, [pc, #188]	; (8001804 <HAL_GPIO_Init+0x304>)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_GPIO_Init+0x304>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001770:	4a24      	ldr	r2, [pc, #144]	; (8001804 <HAL_GPIO_Init+0x304>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001776:	4b23      	ldr	r3, [pc, #140]	; (8001804 <HAL_GPIO_Init+0x304>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800179a:	4a1a      	ldr	r2, [pc, #104]	; (8001804 <HAL_GPIO_Init+0x304>)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_GPIO_Init+0x304>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017c4:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <HAL_GPIO_Init+0x304>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3301      	adds	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	2b0f      	cmp	r3, #15
 80017d4:	f67f aea2 	bls.w	800151c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40013800 	.word	0x40013800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	40020400 	.word	0x40020400
 80017f8:	40020800 	.word	0x40020800
 80017fc:	40020c00 	.word	0x40020c00
 8001800:	40021000 	.word	0x40021000
 8001804:	40013c00 	.word	0x40013c00

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001818:	787b      	ldrb	r3, [r7, #1]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001824:	e003      	b.n	800182e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001826:	887b      	ldrh	r3, [r7, #2]
 8001828:	041a      	lsls	r2, r3, #16
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	619a      	str	r2, [r3, #24]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e264      	b.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d075      	beq.n	8001946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800185a:	4ba3      	ldr	r3, [pc, #652]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b04      	cmp	r3, #4
 8001864:	d00c      	beq.n	8001880 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001866:	4ba0      	ldr	r3, [pc, #640]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800186e:	2b08      	cmp	r3, #8
 8001870:	d112      	bne.n	8001898 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001872:	4b9d      	ldr	r3, [pc, #628]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800187e:	d10b      	bne.n	8001898 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001880:	4b99      	ldr	r3, [pc, #612]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d05b      	beq.n	8001944 <HAL_RCC_OscConfig+0x108>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d157      	bne.n	8001944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e23f      	b.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a0:	d106      	bne.n	80018b0 <HAL_RCC_OscConfig+0x74>
 80018a2:	4b91      	ldr	r3, [pc, #580]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a90      	ldr	r2, [pc, #576]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e01d      	b.n	80018ec <HAL_RCC_OscConfig+0xb0>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b8:	d10c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x98>
 80018ba:	4b8b      	ldr	r3, [pc, #556]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a8a      	ldr	r2, [pc, #552]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b88      	ldr	r3, [pc, #544]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a87      	ldr	r2, [pc, #540]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e00b      	b.n	80018ec <HAL_RCC_OscConfig+0xb0>
 80018d4:	4b84      	ldr	r3, [pc, #528]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a83      	ldr	r2, [pc, #524]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 80018da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b81      	ldr	r3, [pc, #516]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a80      	ldr	r2, [pc, #512]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 80018e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fa7c 	bl	8000df0 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff fa78 	bl	8000df0 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e204      	b.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	4b76      	ldr	r3, [pc, #472]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0xc0>
 800191a:	e014      	b.n	8001946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fa68 	bl	8000df0 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fa64 	bl	8000df0 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e1f0      	b.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001936:	4b6c      	ldr	r3, [pc, #432]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0xe8>
 8001942:	e000      	b.n	8001946 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d063      	beq.n	8001a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001952:	4b65      	ldr	r3, [pc, #404]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00b      	beq.n	8001976 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195e:	4b62      	ldr	r3, [pc, #392]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001966:	2b08      	cmp	r3, #8
 8001968:	d11c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800196a:	4b5f      	ldr	r3, [pc, #380]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d116      	bne.n	80019a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	4b5c      	ldr	r3, [pc, #368]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_RCC_OscConfig+0x152>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d001      	beq.n	800198e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e1c4      	b.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198e:	4b56      	ldr	r3, [pc, #344]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4952      	ldr	r1, [pc, #328]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a2:	e03a      	b.n	8001a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d020      	beq.n	80019ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ac:	4b4f      	ldr	r3, [pc, #316]	; (8001aec <HAL_RCC_OscConfig+0x2b0>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b2:	f7ff fa1d 	bl	8000df0 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ba:	f7ff fa19 	bl	8000df0 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e1a5      	b.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019cc:	4b46      	ldr	r3, [pc, #280]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d8:	4b43      	ldr	r3, [pc, #268]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4940      	ldr	r1, [pc, #256]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
 80019ec:	e015      	b.n	8001a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ee:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <HAL_RCC_OscConfig+0x2b0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff f9fc 	bl	8000df0 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fc:	f7ff f9f8 	bl	8000df0 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e184      	b.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d030      	beq.n	8001a88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d016      	beq.n	8001a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2e:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <HAL_RCC_OscConfig+0x2b4>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a34:	f7ff f9dc 	bl	8000df0 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3c:	f7ff f9d8 	bl	8000df0 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e164      	b.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4e:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 8001a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x200>
 8001a5a:	e015      	b.n	8001a88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5c:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_RCC_OscConfig+0x2b4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7ff f9c5 	bl	8000df0 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a6a:	f7ff f9c1 	bl	8000df0 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e14d      	b.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 8001a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f0      	bne.n	8001a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80a0 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10f      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_RCC_OscConfig+0x2b8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d121      	bne.n	8001b16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_RCC_OscConfig+0x2b8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <HAL_RCC_OscConfig+0x2b8>)
 8001ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ade:	f7ff f987 	bl	8000df0 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	e011      	b.n	8001b0a <HAL_RCC_OscConfig+0x2ce>
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	42470000 	.word	0x42470000
 8001af0:	42470e80 	.word	0x42470e80
 8001af4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af8:	f7ff f97a 	bl	8000df0 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e106      	b.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0a:	4b85      	ldr	r3, [pc, #532]	; (8001d20 <HAL_RCC_OscConfig+0x4e4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d106      	bne.n	8001b2c <HAL_RCC_OscConfig+0x2f0>
 8001b1e:	4b81      	ldr	r3, [pc, #516]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	4a80      	ldr	r2, [pc, #512]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2a:	e01c      	b.n	8001b66 <HAL_RCC_OscConfig+0x32a>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d10c      	bne.n	8001b4e <HAL_RCC_OscConfig+0x312>
 8001b34:	4b7b      	ldr	r3, [pc, #492]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	4a7a      	ldr	r2, [pc, #488]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b40:	4b78      	ldr	r3, [pc, #480]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b44:	4a77      	ldr	r2, [pc, #476]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4c:	e00b      	b.n	8001b66 <HAL_RCC_OscConfig+0x32a>
 8001b4e:	4b75      	ldr	r3, [pc, #468]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b52:	4a74      	ldr	r2, [pc, #464]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5a:	4b72      	ldr	r3, [pc, #456]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	4a71      	ldr	r2, [pc, #452]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001b60:	f023 0304 	bic.w	r3, r3, #4
 8001b64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d015      	beq.n	8001b9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6e:	f7ff f93f 	bl	8000df0 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff f93b 	bl	8000df0 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0c5      	b.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	4b65      	ldr	r3, [pc, #404]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ee      	beq.n	8001b76 <HAL_RCC_OscConfig+0x33a>
 8001b98:	e014      	b.n	8001bc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f929 	bl	8000df0 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7ff f925 	bl	8000df0 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e0af      	b.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb8:	4b5a      	ldr	r3, [pc, #360]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ee      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d105      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bca:	4b56      	ldr	r3, [pc, #344]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a55      	ldr	r2, [pc, #340]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 809b 	beq.w	8001d16 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001be0:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d05c      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d141      	bne.n	8001c78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf4:	4b4c      	ldr	r3, [pc, #304]	; (8001d28 <HAL_RCC_OscConfig+0x4ec>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f8f9 	bl	8000df0 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c02:	f7ff f8f5 	bl	8000df0 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e081      	b.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c14:	4b43      	ldr	r3, [pc, #268]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69da      	ldr	r2, [r3, #28]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	019b      	lsls	r3, r3, #6
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	085b      	lsrs	r3, r3, #1
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	041b      	lsls	r3, r3, #16
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	061b      	lsls	r3, r3, #24
 8001c44:	4937      	ldr	r1, [pc, #220]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c4a:	4b37      	ldr	r3, [pc, #220]	; (8001d28 <HAL_RCC_OscConfig+0x4ec>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff f8ce 	bl	8000df0 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c58:	f7ff f8ca 	bl	8000df0 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e056      	b.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6a:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x41c>
 8001c76:	e04e      	b.n	8001d16 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <HAL_RCC_OscConfig+0x4ec>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7ff f8b7 	bl	8000df0 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c86:	f7ff f8b3 	bl	8000df0 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e03f      	b.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c98:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x44a>
 8001ca4:	e037      	b.n	8001d16 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e032      	b.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_RCC_OscConfig+0x4e8>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d028      	beq.n	8001d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d121      	bne.n	8001d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d11a      	bne.n	8001d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ce8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d111      	bne.n	8001d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d107      	bne.n	8001d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40007000 	.word	0x40007000
 8001d24:	40023800 	.word	0x40023800
 8001d28:	42470060 	.word	0x42470060

08001d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0cc      	b.n	8001eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d40:	4b68      	ldr	r3, [pc, #416]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d90c      	bls.n	8001d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4e:	4b65      	ldr	r3, [pc, #404]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b63      	ldr	r3, [pc, #396]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0b8      	b.n	8001eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d80:	4b59      	ldr	r3, [pc, #356]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4a58      	ldr	r2, [pc, #352]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d98:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	4a52      	ldr	r2, [pc, #328]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da4:	4b50      	ldr	r3, [pc, #320]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	494d      	ldr	r1, [pc, #308]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d044      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d107      	bne.n	8001dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d119      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e07f      	b.n	8001eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d003      	beq.n	8001dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d107      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dea:	4b3f      	ldr	r3, [pc, #252]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e06f      	b.n	8001eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e067      	b.n	8001eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e0a:	4b37      	ldr	r3, [pc, #220]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f023 0203 	bic.w	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4934      	ldr	r1, [pc, #208]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e1c:	f7fe ffe8 	bl	8000df0 <HAL_GetTick>
 8001e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e24:	f7fe ffe4 	bl	8000df0 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e04f      	b.n	8001eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 020c 	and.w	r2, r3, #12
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d1eb      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d20c      	bcs.n	8001e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e032      	b.n	8001eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4916      	ldr	r1, [pc, #88]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d009      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e9e:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	490e      	ldr	r1, [pc, #56]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eb2:	f000 f821 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	490a      	ldr	r1, [pc, #40]	; (8001eec <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	5ccb      	ldrb	r3, [r1, r3]
 8001ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe ff48 	bl	8000d68 <HAL_InitTick>

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023c00 	.word	0x40023c00
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	08003a2c 	.word	0x08003a2c
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000004 	.word	0x20000004

08001ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f10:	4b67      	ldr	r3, [pc, #412]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d00d      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x40>
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	f200 80bd 	bhi.w	800209c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x34>
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d003      	beq.n	8001f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f2a:	e0b7      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f2c:	4b61      	ldr	r3, [pc, #388]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f2e:	60bb      	str	r3, [r7, #8]
       break;
 8001f30:	e0b7      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f32:	4b60      	ldr	r3, [pc, #384]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f34:	60bb      	str	r3, [r7, #8]
      break;
 8001f36:	e0b4      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f38:	4b5d      	ldr	r3, [pc, #372]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f40:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f42:	4b5b      	ldr	r3, [pc, #364]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d04d      	beq.n	8001fea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f4e:	4b58      	ldr	r3, [pc, #352]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	099b      	lsrs	r3, r3, #6
 8001f54:	461a      	mov	r2, r3
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f5e:	f04f 0100 	mov.w	r1, #0
 8001f62:	ea02 0800 	and.w	r8, r2, r0
 8001f66:	ea03 0901 	and.w	r9, r3, r1
 8001f6a:	4640      	mov	r0, r8
 8001f6c:	4649      	mov	r1, r9
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	014b      	lsls	r3, r1, #5
 8001f78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f7c:	0142      	lsls	r2, r0, #5
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	ebb0 0008 	subs.w	r0, r0, r8
 8001f86:	eb61 0109 	sbc.w	r1, r1, r9
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	018b      	lsls	r3, r1, #6
 8001f94:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f98:	0182      	lsls	r2, r0, #6
 8001f9a:	1a12      	subs	r2, r2, r0
 8001f9c:	eb63 0301 	sbc.w	r3, r3, r1
 8001fa0:	f04f 0000 	mov.w	r0, #0
 8001fa4:	f04f 0100 	mov.w	r1, #0
 8001fa8:	00d9      	lsls	r1, r3, #3
 8001faa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fae:	00d0      	lsls	r0, r2, #3
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	eb12 0208 	adds.w	r2, r2, r8
 8001fb8:	eb43 0309 	adc.w	r3, r3, r9
 8001fbc:	f04f 0000 	mov.w	r0, #0
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	0299      	lsls	r1, r3, #10
 8001fc6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001fca:	0290      	lsls	r0, r2, #10
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	f7fe f8fc 	bl	80001d8 <__aeabi_uldivmod>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	e04a      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fea:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	099b      	lsrs	r3, r3, #6
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ffa:	f04f 0100 	mov.w	r1, #0
 8001ffe:	ea02 0400 	and.w	r4, r2, r0
 8002002:	ea03 0501 	and.w	r5, r3, r1
 8002006:	4620      	mov	r0, r4
 8002008:	4629      	mov	r1, r5
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	014b      	lsls	r3, r1, #5
 8002014:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002018:	0142      	lsls	r2, r0, #5
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	1b00      	subs	r0, r0, r4
 8002020:	eb61 0105 	sbc.w	r1, r1, r5
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	018b      	lsls	r3, r1, #6
 800202e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002032:	0182      	lsls	r2, r0, #6
 8002034:	1a12      	subs	r2, r2, r0
 8002036:	eb63 0301 	sbc.w	r3, r3, r1
 800203a:	f04f 0000 	mov.w	r0, #0
 800203e:	f04f 0100 	mov.w	r1, #0
 8002042:	00d9      	lsls	r1, r3, #3
 8002044:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002048:	00d0      	lsls	r0, r2, #3
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	1912      	adds	r2, r2, r4
 8002050:	eb45 0303 	adc.w	r3, r5, r3
 8002054:	f04f 0000 	mov.w	r0, #0
 8002058:	f04f 0100 	mov.w	r1, #0
 800205c:	0299      	lsls	r1, r3, #10
 800205e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002062:	0290      	lsls	r0, r2, #10
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	461a      	mov	r2, r3
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	f7fe f8b0 	bl	80001d8 <__aeabi_uldivmod>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4613      	mov	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	0c1b      	lsrs	r3, r3, #16
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	3301      	adds	r3, #1
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	fbb2 f3f3 	udiv	r3, r2, r3
 8002098:	60bb      	str	r3, [r7, #8]
      break;
 800209a:	e002      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800209e:	60bb      	str	r3, [r7, #8]
      break;
 80020a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a2:	68bb      	ldr	r3, [r7, #8]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800
 80020b4:	00f42400 	.word	0x00f42400

080020b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e07b      	b.n	80021c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d108      	bne.n	80020e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020da:	d009      	beq.n	80020f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
 80020e2:	e005      	b.n	80020f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fd3a 	bl	8000b84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002126:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002174:	ea42 0103 	orr.w	r1, r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	0c1b      	lsrs	r3, r3, #16
 800218e:	f003 0104 	and.w	r1, r3, #4
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	f003 0210 	and.w	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	69da      	ldr	r2, [r3, #28]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b088      	sub	sp, #32
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	4613      	mov	r3, r2
 80021d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_SPI_Transmit+0x22>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e126      	b.n	800243a <HAL_SPI_Transmit+0x270>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021f4:	f7fe fdfc 	bl	8000df0 <HAL_GetTick>
 80021f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b01      	cmp	r3, #1
 8002208:	d002      	beq.n	8002210 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800220a:	2302      	movs	r3, #2
 800220c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800220e:	e10b      	b.n	8002428 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_SPI_Transmit+0x52>
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002220:	e102      	b.n	8002428 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2203      	movs	r2, #3
 8002226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	88fa      	ldrh	r2, [r7, #6]
 800223a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	88fa      	ldrh	r2, [r7, #6]
 8002240:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002268:	d10f      	bne.n	800228a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002278:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002288:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002294:	2b40      	cmp	r3, #64	; 0x40
 8002296:	d007      	beq.n	80022a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022b0:	d14b      	bne.n	800234a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_SPI_Transmit+0xf6>
 80022ba:	8afb      	ldrh	r3, [r7, #22]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d13e      	bne.n	800233e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	881a      	ldrh	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	1c9a      	adds	r2, r3, #2
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3b01      	subs	r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022e4:	e02b      	b.n	800233e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d112      	bne.n	800231a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	881a      	ldrh	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	1c9a      	adds	r2, r3, #2
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	86da      	strh	r2, [r3, #54]	; 0x36
 8002318:	e011      	b.n	800233e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800231a:	f7fe fd69 	bl	8000df0 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d803      	bhi.n	8002332 <HAL_SPI_Transmit+0x168>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d102      	bne.n	8002338 <HAL_SPI_Transmit+0x16e>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800233c:	e074      	b.n	8002428 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1ce      	bne.n	80022e6 <HAL_SPI_Transmit+0x11c>
 8002348:	e04c      	b.n	80023e4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_SPI_Transmit+0x18e>
 8002352:	8afb      	ldrh	r3, [r7, #22]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d140      	bne.n	80023da <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	330c      	adds	r3, #12
 8002362:	7812      	ldrb	r2, [r2, #0]
 8002364:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800237e:	e02c      	b.n	80023da <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b02      	cmp	r3, #2
 800238c:	d113      	bne.n	80023b6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	330c      	adds	r3, #12
 8002398:	7812      	ldrb	r2, [r2, #0]
 800239a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80023b4:	e011      	b.n	80023da <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023b6:	f7fe fd1b 	bl	8000df0 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d803      	bhi.n	80023ce <HAL_SPI_Transmit+0x204>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d102      	bne.n	80023d4 <HAL_SPI_Transmit+0x20a>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023d8:	e026      	b.n	8002428 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1cd      	bne.n	8002380 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	6839      	ldr	r1, [r7, #0]
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 fbcb 	bl	8002b84 <SPI_EndRxTxTransaction>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2220      	movs	r2, #32
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10a      	bne.n	8002418 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	77fb      	strb	r3, [r7, #31]
 8002424:	e000      	b.n	8002428 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002426:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002438:	7ffb      	ldrb	r3, [r7, #31]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3720      	adds	r7, #32
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b088      	sub	sp, #32
 8002446:	af02      	add	r7, sp, #8
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	603b      	str	r3, [r7, #0]
 800244e:	4613      	mov	r3, r2
 8002450:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800245e:	d112      	bne.n	8002486 <HAL_SPI_Receive+0x44>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10e      	bne.n	8002486 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2204      	movs	r2, #4
 800246c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002470:	88fa      	ldrh	r2, [r7, #6]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	4613      	mov	r3, r2
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	68b9      	ldr	r1, [r7, #8]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f8f1 	bl	8002664 <HAL_SPI_TransmitReceive>
 8002482:	4603      	mov	r3, r0
 8002484:	e0ea      	b.n	800265c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_SPI_Receive+0x52>
 8002490:	2302      	movs	r3, #2
 8002492:	e0e3      	b.n	800265c <HAL_SPI_Receive+0x21a>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800249c:	f7fe fca8 	bl	8000df0 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d002      	beq.n	80024b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80024ae:	2302      	movs	r3, #2
 80024b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024b2:	e0ca      	b.n	800264a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <HAL_SPI_Receive+0x7e>
 80024ba:	88fb      	ldrh	r3, [r7, #6]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024c4:	e0c1      	b.n	800264a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2204      	movs	r2, #4
 80024ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	88fa      	ldrh	r2, [r7, #6]
 80024de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	88fa      	ldrh	r2, [r7, #6]
 80024e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800250c:	d10f      	bne.n	800252e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800251c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800252c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002538:	2b40      	cmp	r3, #64	; 0x40
 800253a:	d007      	beq.n	800254c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800254a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d162      	bne.n	800261a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002554:	e02e      	b.n	80025b4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b01      	cmp	r3, #1
 8002562:	d115      	bne.n	8002590 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f103 020c 	add.w	r2, r3, #12
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	7812      	ldrb	r2, [r2, #0]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800258e:	e011      	b.n	80025b4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002590:	f7fe fc2e 	bl	8000df0 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d803      	bhi.n	80025a8 <HAL_SPI_Receive+0x166>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a6:	d102      	bne.n	80025ae <HAL_SPI_Receive+0x16c>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025b2:	e04a      	b.n	800264a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1cb      	bne.n	8002556 <HAL_SPI_Receive+0x114>
 80025be:	e031      	b.n	8002624 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d113      	bne.n	80025f6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	b292      	uxth	r2, r2
 80025da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e0:	1c9a      	adds	r2, r3, #2
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025f4:	e011      	b.n	800261a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025f6:	f7fe fbfb 	bl	8000df0 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d803      	bhi.n	800260e <HAL_SPI_Receive+0x1cc>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d102      	bne.n	8002614 <HAL_SPI_Receive+0x1d2>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002618:	e017      	b.n	800264a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1cd      	bne.n	80025c0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	6839      	ldr	r1, [r7, #0]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 fa45 	bl	8002ab8 <SPI_EndRxTransaction>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	75fb      	strb	r3, [r7, #23]
 8002646:	e000      	b.n	800264a <HAL_SPI_Receive+0x208>
  }

error :
 8002648:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800265a:	7dfb      	ldrb	r3, [r7, #23]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08c      	sub	sp, #48	; 0x30
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002672:	2301      	movs	r3, #1
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_SPI_TransmitReceive+0x26>
 8002686:	2302      	movs	r3, #2
 8002688:	e18a      	b.n	80029a0 <HAL_SPI_TransmitReceive+0x33c>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002692:	f7fe fbad 	bl	8000df0 <HAL_GetTick>
 8002696:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800269e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026a8:	887b      	ldrh	r3, [r7, #2]
 80026aa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d00f      	beq.n	80026d4 <HAL_SPI_TransmitReceive+0x70>
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ba:	d107      	bne.n	80026cc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d103      	bne.n	80026cc <HAL_SPI_TransmitReceive+0x68>
 80026c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d003      	beq.n	80026d4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
 80026ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026d2:	e15b      	b.n	800298c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_SPI_TransmitReceive+0x82>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HAL_SPI_TransmitReceive+0x82>
 80026e0:	887b      	ldrh	r3, [r7, #2]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d103      	bne.n	80026ee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026ec:	e14e      	b.n	800298c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d003      	beq.n	8002702 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2205      	movs	r2, #5
 80026fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	887a      	ldrh	r2, [r7, #2]
 8002712:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	887a      	ldrh	r2, [r7, #2]
 800272a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002742:	2b40      	cmp	r3, #64	; 0x40
 8002744:	d007      	beq.n	8002756 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002754:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800275e:	d178      	bne.n	8002852 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <HAL_SPI_TransmitReceive+0x10a>
 8002768:	8b7b      	ldrh	r3, [r7, #26]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d166      	bne.n	800283c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	881a      	ldrh	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	1c9a      	adds	r2, r3, #2
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002792:	e053      	b.n	800283c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d11b      	bne.n	80027da <HAL_SPI_TransmitReceive+0x176>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d016      	beq.n	80027da <HAL_SPI_TransmitReceive+0x176>
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d113      	bne.n	80027da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	881a      	ldrh	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	1c9a      	adds	r2, r3, #2
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d119      	bne.n	800281c <HAL_SPI_TransmitReceive+0x1b8>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d014      	beq.n	800281c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	b292      	uxth	r2, r2
 80027fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002804:	1c9a      	adds	r2, r3, #2
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800280e:	b29b      	uxth	r3, r3
 8002810:	3b01      	subs	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002818:	2301      	movs	r3, #1
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800281c:	f7fe fae8 	bl	8000df0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002828:	429a      	cmp	r2, r3
 800282a:	d807      	bhi.n	800283c <HAL_SPI_TransmitReceive+0x1d8>
 800282c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002832:	d003      	beq.n	800283c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800283a:	e0a7      	b.n	800298c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1a6      	bne.n	8002794 <HAL_SPI_TransmitReceive+0x130>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1a1      	bne.n	8002794 <HAL_SPI_TransmitReceive+0x130>
 8002850:	e07c      	b.n	800294c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <HAL_SPI_TransmitReceive+0x1fc>
 800285a:	8b7b      	ldrh	r3, [r7, #26]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d16b      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	330c      	adds	r3, #12
 800286a:	7812      	ldrb	r2, [r2, #0]
 800286c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002886:	e057      	b.n	8002938 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b02      	cmp	r3, #2
 8002894:	d11c      	bne.n	80028d0 <HAL_SPI_TransmitReceive+0x26c>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800289a:	b29b      	uxth	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d017      	beq.n	80028d0 <HAL_SPI_TransmitReceive+0x26c>
 80028a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d114      	bne.n	80028d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	330c      	adds	r3, #12
 80028b0:	7812      	ldrb	r2, [r2, #0]
 80028b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d119      	bne.n	8002912 <HAL_SPI_TransmitReceive+0x2ae>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d014      	beq.n	8002912 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002904:	b29b      	uxth	r3, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800290e:	2301      	movs	r3, #1
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002912:	f7fe fa6d 	bl	8000df0 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800291e:	429a      	cmp	r2, r3
 8002920:	d803      	bhi.n	800292a <HAL_SPI_TransmitReceive+0x2c6>
 8002922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d102      	bne.n	8002930 <HAL_SPI_TransmitReceive+0x2cc>
 800292a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292c:	2b00      	cmp	r3, #0
 800292e:	d103      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002936:	e029      	b.n	800298c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1a2      	bne.n	8002888 <HAL_SPI_TransmitReceive+0x224>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d19d      	bne.n	8002888 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800294c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f917 	bl	8002b84 <SPI_EndRxTxTransaction>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d006      	beq.n	800296a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002968:	e010      	b.n	800298c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10b      	bne.n	800298a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	e000      	b.n	800298c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800298a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800299c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3730      	adds	r7, #48	; 0x30
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	4613      	mov	r3, r2
 80029b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029b8:	f7fe fa1a 	bl	8000df0 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	4413      	add	r3, r2
 80029c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029c8:	f7fe fa12 	bl	8000df0 <HAL_GetTick>
 80029cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029ce:	4b39      	ldr	r3, [pc, #228]	; (8002ab4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	015b      	lsls	r3, r3, #5
 80029d4:	0d1b      	lsrs	r3, r3, #20
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	fb02 f303 	mul.w	r3, r2, r3
 80029dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029de:	e054      	b.n	8002a8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e6:	d050      	beq.n	8002a8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029e8:	f7fe fa02 	bl	8000df0 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d902      	bls.n	80029fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d13d      	bne.n	8002a7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a16:	d111      	bne.n	8002a3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a20:	d004      	beq.n	8002a2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2a:	d107      	bne.n	8002a3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a44:	d10f      	bne.n	8002a66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e017      	b.n	8002aaa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4013      	ands	r3, r2
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	bf0c      	ite	eq
 8002a9a:	2301      	moveq	r3, #1
 8002a9c:	2300      	movne	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d19b      	bne.n	80029e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000000 	.word	0x20000000

08002ab8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002acc:	d111      	bne.n	8002af2 <SPI_EndRxTransaction+0x3a>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad6:	d004      	beq.n	8002ae2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae0:	d107      	bne.n	8002af2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002af0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002afa:	d12a      	bne.n	8002b52 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b04:	d012      	beq.n	8002b2c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2180      	movs	r1, #128	; 0x80
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f7ff ff49 	bl	80029a8 <SPI_WaitFlagStateUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d02d      	beq.n	8002b78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b20:	f043 0220 	orr.w	r2, r3, #32
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e026      	b.n	8002b7a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2200      	movs	r2, #0
 8002b34:	2101      	movs	r1, #1
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f7ff ff36 	bl	80029a8 <SPI_WaitFlagStateUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d01a      	beq.n	8002b78 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b46:	f043 0220 	orr.w	r2, r3, #32
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e013      	b.n	8002b7a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f7ff ff23 	bl	80029a8 <SPI_WaitFlagStateUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e000      	b.n	8002b7a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b90:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <SPI_EndRxTxTransaction+0x7c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1b      	ldr	r2, [pc, #108]	; (8002c04 <SPI_EndRxTxTransaction+0x80>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	0d5b      	lsrs	r3, r3, #21
 8002b9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ba0:	fb02 f303 	mul.w	r3, r2, r3
 8002ba4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bae:	d112      	bne.n	8002bd6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2180      	movs	r1, #128	; 0x80
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f7ff fef4 	bl	80029a8 <SPI_WaitFlagStateUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d016      	beq.n	8002bf4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bca:	f043 0220 	orr.w	r2, r3, #32
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e00f      	b.n	8002bf6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00a      	beq.n	8002bf2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bec:	2b80      	cmp	r3, #128	; 0x80
 8002bee:	d0f2      	beq.n	8002bd6 <SPI_EndRxTxTransaction+0x52>
 8002bf0:	e000      	b.n	8002bf4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002bf2:	bf00      	nop
  }

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000000 	.word	0x20000000
 8002c04:	165e9f81 	.word	0x165e9f81

08002c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e041      	b.n	8002c9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fd fff0 	bl	8000c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	4619      	mov	r1, r3
 8002c46:	4610      	mov	r0, r2
 8002c48:	f000 f8f4 	bl	8002e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_TIM_ConfigClockSource+0x1c>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e0b4      	b.n	8002e2c <HAL_TIM_ConfigClockSource+0x186>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ce0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ce8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfa:	d03e      	beq.n	8002d7a <HAL_TIM_ConfigClockSource+0xd4>
 8002cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d00:	f200 8087 	bhi.w	8002e12 <HAL_TIM_ConfigClockSource+0x16c>
 8002d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d08:	f000 8086 	beq.w	8002e18 <HAL_TIM_ConfigClockSource+0x172>
 8002d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d10:	d87f      	bhi.n	8002e12 <HAL_TIM_ConfigClockSource+0x16c>
 8002d12:	2b70      	cmp	r3, #112	; 0x70
 8002d14:	d01a      	beq.n	8002d4c <HAL_TIM_ConfigClockSource+0xa6>
 8002d16:	2b70      	cmp	r3, #112	; 0x70
 8002d18:	d87b      	bhi.n	8002e12 <HAL_TIM_ConfigClockSource+0x16c>
 8002d1a:	2b60      	cmp	r3, #96	; 0x60
 8002d1c:	d050      	beq.n	8002dc0 <HAL_TIM_ConfigClockSource+0x11a>
 8002d1e:	2b60      	cmp	r3, #96	; 0x60
 8002d20:	d877      	bhi.n	8002e12 <HAL_TIM_ConfigClockSource+0x16c>
 8002d22:	2b50      	cmp	r3, #80	; 0x50
 8002d24:	d03c      	beq.n	8002da0 <HAL_TIM_ConfigClockSource+0xfa>
 8002d26:	2b50      	cmp	r3, #80	; 0x50
 8002d28:	d873      	bhi.n	8002e12 <HAL_TIM_ConfigClockSource+0x16c>
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d058      	beq.n	8002de0 <HAL_TIM_ConfigClockSource+0x13a>
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d86f      	bhi.n	8002e12 <HAL_TIM_ConfigClockSource+0x16c>
 8002d32:	2b30      	cmp	r3, #48	; 0x30
 8002d34:	d064      	beq.n	8002e00 <HAL_TIM_ConfigClockSource+0x15a>
 8002d36:	2b30      	cmp	r3, #48	; 0x30
 8002d38:	d86b      	bhi.n	8002e12 <HAL_TIM_ConfigClockSource+0x16c>
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d060      	beq.n	8002e00 <HAL_TIM_ConfigClockSource+0x15a>
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d867      	bhi.n	8002e12 <HAL_TIM_ConfigClockSource+0x16c>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d05c      	beq.n	8002e00 <HAL_TIM_ConfigClockSource+0x15a>
 8002d46:	2b10      	cmp	r3, #16
 8002d48:	d05a      	beq.n	8002e00 <HAL_TIM_ConfigClockSource+0x15a>
 8002d4a:	e062      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6899      	ldr	r1, [r3, #8]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f000 f964 	bl	8003028 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	609a      	str	r2, [r3, #8]
      break;
 8002d78:	e04f      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6899      	ldr	r1, [r3, #8]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f000 f94d 	bl	8003028 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d9c:	609a      	str	r2, [r3, #8]
      break;
 8002d9e:	e03c      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f000 f8c1 	bl	8002f34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2150      	movs	r1, #80	; 0x50
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 f91a 	bl	8002ff2 <TIM_ITRx_SetConfig>
      break;
 8002dbe:	e02c      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6859      	ldr	r1, [r3, #4]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f000 f8e0 	bl	8002f92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2160      	movs	r1, #96	; 0x60
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 f90a 	bl	8002ff2 <TIM_ITRx_SetConfig>
      break;
 8002dde:	e01c      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	461a      	mov	r2, r3
 8002dee:	f000 f8a1 	bl	8002f34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2140      	movs	r1, #64	; 0x40
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 f8fa 	bl	8002ff2 <TIM_ITRx_SetConfig>
      break;
 8002dfe:	e00c      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f000 f8f1 	bl	8002ff2 <TIM_ITRx_SetConfig>
      break;
 8002e10:	e003      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
      break;
 8002e16:	e000      	b.n	8002e1a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a34      	ldr	r2, [pc, #208]	; (8002f18 <TIM_Base_SetConfig+0xe4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d00f      	beq.n	8002e6c <TIM_Base_SetConfig+0x38>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e52:	d00b      	beq.n	8002e6c <TIM_Base_SetConfig+0x38>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a31      	ldr	r2, [pc, #196]	; (8002f1c <TIM_Base_SetConfig+0xe8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d007      	beq.n	8002e6c <TIM_Base_SetConfig+0x38>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a30      	ldr	r2, [pc, #192]	; (8002f20 <TIM_Base_SetConfig+0xec>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d003      	beq.n	8002e6c <TIM_Base_SetConfig+0x38>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a2f      	ldr	r2, [pc, #188]	; (8002f24 <TIM_Base_SetConfig+0xf0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d108      	bne.n	8002e7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a25      	ldr	r2, [pc, #148]	; (8002f18 <TIM_Base_SetConfig+0xe4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d01b      	beq.n	8002ebe <TIM_Base_SetConfig+0x8a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8c:	d017      	beq.n	8002ebe <TIM_Base_SetConfig+0x8a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a22      	ldr	r2, [pc, #136]	; (8002f1c <TIM_Base_SetConfig+0xe8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <TIM_Base_SetConfig+0x8a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a21      	ldr	r2, [pc, #132]	; (8002f20 <TIM_Base_SetConfig+0xec>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00f      	beq.n	8002ebe <TIM_Base_SetConfig+0x8a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a20      	ldr	r2, [pc, #128]	; (8002f24 <TIM_Base_SetConfig+0xf0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00b      	beq.n	8002ebe <TIM_Base_SetConfig+0x8a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a1f      	ldr	r2, [pc, #124]	; (8002f28 <TIM_Base_SetConfig+0xf4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d007      	beq.n	8002ebe <TIM_Base_SetConfig+0x8a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a1e      	ldr	r2, [pc, #120]	; (8002f2c <TIM_Base_SetConfig+0xf8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d003      	beq.n	8002ebe <TIM_Base_SetConfig+0x8a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a1d      	ldr	r2, [pc, #116]	; (8002f30 <TIM_Base_SetConfig+0xfc>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d108      	bne.n	8002ed0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a08      	ldr	r2, [pc, #32]	; (8002f18 <TIM_Base_SetConfig+0xe4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d103      	bne.n	8002f04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	615a      	str	r2, [r3, #20]
}
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40010000 	.word	0x40010000
 8002f1c:	40000400 	.word	0x40000400
 8002f20:	40000800 	.word	0x40000800
 8002f24:	40000c00 	.word	0x40000c00
 8002f28:	40014000 	.word	0x40014000
 8002f2c:	40014400 	.word	0x40014400
 8002f30:	40014800 	.word	0x40014800

08002f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f023 0201 	bic.w	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f023 030a 	bic.w	r3, r3, #10
 8002f70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	621a      	str	r2, [r3, #32]
}
 8002f86:	bf00      	nop
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b087      	sub	sp, #28
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	f023 0210 	bic.w	r2, r3, #16
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	031b      	lsls	r3, r3, #12
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	621a      	str	r2, [r3, #32]
}
 8002fe6:	bf00      	nop
 8002fe8:	371c      	adds	r7, #28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003008:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	f043 0307 	orr.w	r3, r3, #7
 8003014:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	609a      	str	r2, [r3, #8]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	021a      	lsls	r2, r3, #8
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	431a      	orrs	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4313      	orrs	r3, r2
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	609a      	str	r2, [r3, #8]
}
 800305c:	bf00      	nop
 800305e:	371c      	adds	r7, #28
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800307c:	2302      	movs	r3, #2
 800307e:	e050      	b.n	8003122 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1c      	ldr	r2, [pc, #112]	; (8003130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d018      	beq.n	80030f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030cc:	d013      	beq.n	80030f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a18      	ldr	r2, [pc, #96]	; (8003134 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d00e      	beq.n	80030f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a16      	ldr	r2, [pc, #88]	; (8003138 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d009      	beq.n	80030f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a15      	ldr	r2, [pc, #84]	; (800313c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d004      	beq.n	80030f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a13      	ldr	r2, [pc, #76]	; (8003140 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d10c      	bne.n	8003110 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	4313      	orrs	r3, r2
 8003106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40010000 	.word	0x40010000
 8003134:	40000400 	.word	0x40000400
 8003138:	40000800 	.word	0x40000800
 800313c:	40000c00 	.word	0x40000c00
 8003140:	40014000 	.word	0x40014000

08003144 <_nrf24_CS>:
extern SPI_HandleTypeDef hspi2;



static void _nrf24_CS(void * intf_ptr, bool mode)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	60fb      	str	r3, [r7, #12]
	nrf24_spi_pins_t *api_config_low = (nrf24_spi_pins_t *)api_config->intf_ptr;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	60bb      	str	r3, [r7, #8]
	if (mode)
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <_nrf24_CS+0x2e>
	{
		// Опускаем chip select для того, что бы начать общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_RESET);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	6898      	ldr	r0, [r3, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	899b      	ldrh	r3, [r3, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	4619      	mov	r1, r3
 800316c:	f7fe fb4c 	bl	8001808 <HAL_GPIO_WritePin>
	{
		// Поднимаем chip select для того, что бы закончить общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
		//HAL_Delay(100);
	}
}
 8003170:	e007      	b.n	8003182 <_nrf24_CS+0x3e>
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	6898      	ldr	r0, [r3, #8]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	899b      	ldrh	r3, [r3, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	4619      	mov	r1, r3
 800317e:	f7fe fb43 	bl	8001808 <HAL_GPIO_WritePin>
}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <nrf24_read_register>:
		shift_reg_oe(api_config_low->this, false);
	}
}

void nrf24_read_register(void * intf_ptr, uint8_t reg_addr, uint8_t * reg_data, size_t data_size)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
 8003196:	460b      	mov	r3, r1
 8003198:	72fb      	strb	r3, [r7, #11]

	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	617b      	str	r3, [r7, #20]

	api_config->nrf24_CS(intf_ptr, true);
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2101      	movs	r1, #1
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для чтения из этого регистра
	reg_addr = reg_addr & ~((1 << 5) | (1 << 6) | (1 << 7));
 80031a8:	7afb      	ldrb	r3, [r7, #11]
 80031aa:	f003 031f 	and.w	r3, r3, #31
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, который читаем и читаем данные
	HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	f107 010b 	add.w	r1, r7, #11
 80031ba:	f04f 33ff 	mov.w	r3, #4294967295
 80031be:	2201      	movs	r2, #1
 80031c0:	f7ff f803 	bl	80021ca <HAL_SPI_Transmit>
	HAL_SPI_Receive(api_config->hspi, reg_data, data_size, HAL_MAX_DELAY);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	f7ff f936 	bl	8002442 <HAL_SPI_Receive>

	api_config->nrf24_CS(intf_ptr, false);
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2100      	movs	r1, #0
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	4798      	blx	r3
}
 80031e0:	bf00      	nop
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <nrf24_write_register>:

void nrf24_write_register(void * intf_ptr, uint8_t reg_addr, const uint8_t * reg_data, size_t data_size)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	607a      	str	r2, [r7, #4]
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	460b      	mov	r3, r1
 80031f6:	72fb      	strb	r3, [r7, #11]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	617b      	str	r3, [r7, #20]
	api_config->nrf24_CS(intf_ptr, true);
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2101      	movs	r1, #1
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для записи в регистр
	reg_addr = (reg_addr & ~((1 << 6) | (1 << 7))) | (1 << 5);
 8003206:	7afb      	ldrb	r3, [r7, #11]
 8003208:	b25b      	sxtb	r3, r3
 800320a:	f003 031f 	and.w	r3, r3, #31
 800320e:	b25b      	sxtb	r3, r3
 8003210:	f043 0320 	orr.w	r3, r3, #32
 8003214:	b25b      	sxtb	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, в который пишем и пишем в регистр
	HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	f107 010b 	add.w	r1, r7, #11
 8003222:	f04f 33ff 	mov.w	r3, #4294967295
 8003226:	2201      	movs	r2, #1
 8003228:	f7fe ffcf 	bl	80021ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(api_config->hspi, (uint8_t*)reg_data, data_size, HAL_MAX_DELAY);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	b29a      	uxth	r2, r3
 8003234:	f04f 33ff 	mov.w	r3, #4294967295
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	f7fe ffc6 	bl	80021ca <HAL_SPI_Transmit>

	api_config->nrf24_CS(intf_ptr, false);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2100      	movs	r1, #0
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	4798      	blx	r3
}
 8003248:	bf00      	nop
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <nrf24_write_tx_payload>:
		api_config->nrf24_CS(intf_ptr, false);
	}
}

void nrf24_write_tx_payload(void * intf_ptr, const uint8_t * payload_buffer, size_t payload_size, bool use_ack)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	617b      	str	r3, [r7, #20]
	uint8_t command;
	api_config->nrf24_CS(intf_ptr, true);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2101      	movs	r1, #1
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	4798      	blx	r3
	// Учитываем использование ack
	if (use_ack)
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <nrf24_write_tx_payload+0x28>
	{
		command = NRF24_W_TX_PAYLOAD;
 8003272:	23a0      	movs	r3, #160	; 0xa0
 8003274:	74fb      	strb	r3, [r7, #19]
 8003276:	e001      	b.n	800327c <nrf24_write_tx_payload+0x2c>
	}
	else
	{
		command = NRF24_W_TX_PAYLOAD_NO_ACK;
 8003278:	23b0      	movs	r3, #176	; 0xb0
 800327a:	74fb      	strb	r3, [r7, #19]
	}
	// Передаем данные
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	f107 0113 	add.w	r1, r7, #19
 8003284:	f04f 33ff 	mov.w	r3, #4294967295
 8003288:	2201      	movs	r2, #1
 800328a:	f7fe ff9e 	bl	80021ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(api_config->hspi, (uint8_t*)payload_buffer, payload_size, HAL_MAX_DELAY);
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	b29a      	uxth	r2, r3
 8003296:	f04f 33ff 	mov.w	r3, #4294967295
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	f7fe ff95 	bl	80021ca <HAL_SPI_Transmit>

	api_config->nrf24_CS(intf_ptr, false);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2100      	movs	r1, #0
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	4798      	blx	r3
}
 80032aa:	bf00      	nop
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <nrf24_flush_rx>:

void nrf24_flush_rx(void * intf_ptr)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_FLUSH_RX;
 80032be:	23e2      	movs	r3, #226	; 0xe2
 80032c0:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2101      	movs	r1, #1
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	4798      	blx	r3
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	f107 010b 	add.w	r1, r7, #11
 80032d4:	f04f 33ff 	mov.w	r3, #4294967295
 80032d8:	2201      	movs	r2, #1
 80032da:	f7fe ff76 	bl	80021ca <HAL_SPI_Transmit>
	api_config->nrf24_CS(intf_ptr, false);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2100      	movs	r1, #0
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	4798      	blx	r3
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <nrf24_flush_tx>:
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
	api_config->nrf24_CS(intf_ptr, false);
}

void nrf24_flush_tx(void * intf_ptr)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_FLUSH_TX;
 80032fc:	23e1      	movs	r3, #225	; 0xe1
 80032fe:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2101      	movs	r1, #1
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	4798      	blx	r3
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	f107 010b 	add.w	r1, r7, #11
 8003312:	f04f 33ff 	mov.w	r3, #4294967295
 8003316:	2201      	movs	r2, #1
 8003318:	f7fe ff57 	bl	80021ca <HAL_SPI_Transmit>
	api_config->nrf24_CS(intf_ptr, false);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2100      	movs	r1, #0
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4798      	blx	r3
}
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <nrf24_get_status>:

	api_config->nrf24_CS(intf_ptr, false);
}

void nrf24_get_status(void * intf_ptr, uint8_t * status)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b086      	sub	sp, #24
 8003332:	af02      	add	r7, sp, #8
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	6039      	str	r1, [r7, #0]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_NOP;
 800333c:	23ff      	movs	r3, #255	; 0xff
 800333e:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2101      	movs	r1, #1
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	4798      	blx	r3
	HAL_SPI_TransmitReceive(api_config->hspi, &command, status, 1, HAL_MAX_DELAY);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	f107 010b 	add.w	r1, r7, #11
 8003352:	f04f 33ff 	mov.w	r3, #4294967295
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	2301      	movs	r3, #1
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	f7ff f982 	bl	8002664 <HAL_SPI_TransmitReceive>
	api_config->nrf24_CS(intf_ptr, false);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2100      	movs	r1, #0
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
}
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <nrf24_ce_activate>:

void nrf24_ce_activate(void * intf_ptr, bool onoff)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	460b      	mov	r3, r1
 800337c:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	60fb      	str	r3, [r7, #12]
	api_config->nrf24_CE(intf_ptr, onoff);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	4611      	mov	r1, r2
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
}
 800338e:	bf00      	nop
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <_nrf24_CE>:

void _nrf24_CE(void * intf_ptr, bool onoff)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	60fb      	str	r3, [r7, #12]
	nrf24_spi_pins_t *api_config_low = (nrf24_spi_pins_t *)api_config->intf_ptr;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	60bb      	str	r3, [r7, #8]
	if (onoff)
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <_nrf24_CE+0x2e>
	{
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin,  GPIO_PIN_SET);
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	889b      	ldrh	r3, [r3, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	4619      	mov	r1, r3
 80033be:	f7fe fa23 	bl	8001808 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin, GPIO_PIN_RESET);
	}
}
 80033c2:	e007      	b.n	80033d4 <_nrf24_CE+0x3e>
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin, GPIO_PIN_RESET);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	889b      	ldrh	r3, [r3, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	4619      	mov	r1, r3
 80033d0:	f7fe fa1a 	bl	8001808 <HAL_GPIO_WritePin>
}
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <nrf24_spi_init>:
	shift_reg_write_bit_8(api_config_low->this, api_config_low->pos_CE, onoff);
	shift_reg_oe(api_config_low->this, false);
}

void nrf24_spi_init(nrf24_lower_api_config_t* nrf24, SPI_HandleTypeDef *hspi, nrf24_spi_pins_t* pins)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
	nrf24->hspi = hspi;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	601a      	str	r2, [r3, #0]
	nrf24->nrf24_CS = _nrf24_CS;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4a06      	ldr	r2, [pc, #24]	; (800340c <nrf24_spi_init+0x30>)
 80033f2:	605a      	str	r2, [r3, #4]
	nrf24->nrf24_CE = _nrf24_CE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4a06      	ldr	r2, [pc, #24]	; (8003410 <nrf24_spi_init+0x34>)
 80033f8:	609a      	str	r2, [r3, #8]
	nrf24->intf_ptr = pins;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	60da      	str	r2, [r3, #12]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	08003145 	.word	0x08003145
 8003410:	08003397 	.word	0x08003397

08003414 <nrf24_setup_rf>:
#include "../nrf24_lower_api.h"
#include "../nrf24_defs.h"


int nrf24_setup_rf(void * intf_ptr, const nrf24_rf_config_t * config)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
	uint8_t rf_setup = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_RF_SETUP, &rf_setup, 1);
 8003422:	f107 020f 	add.w	r2, r7, #15
 8003426:	2301      	movs	r3, #1
 8003428:	2106      	movs	r1, #6
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff fead 	bl	800318a <nrf24_read_register>
	switch (config->data_rate)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d01c      	beq.n	8003472 <nrf24_setup_rf+0x5e>
 8003438:	2b02      	cmp	r3, #2
 800343a:	dc25      	bgt.n	8003488 <nrf24_setup_rf+0x74>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <nrf24_setup_rf+0x32>
 8003440:	2b01      	cmp	r3, #1
 8003442:	d00b      	beq.n	800345c <nrf24_setup_rf+0x48>
 8003444:	e020      	b.n	8003488 <nrf24_setup_rf+0x74>
	{
	case NRF24_DATARATE_250_KBIT:
		rf_setup |= NRF24_RFSETUP_RF_DR_LOW; // ставим 1
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	f043 0320 	orr.w	r3, r3, #32
 800344c:	b2db      	uxtb	r3, r3
 800344e:	73fb      	strb	r3, [r7, #15]
		rf_setup &= ~NRF24_RFSETUP_RF_DR_HIGH; // ставим 0
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	f023 0308 	bic.w	r3, r3, #8
 8003456:	b2db      	uxtb	r3, r3
 8003458:	73fb      	strb	r3, [r7, #15]
		break;
 800345a:	e015      	b.n	8003488 <nrf24_setup_rf+0x74>
	case NRF24_DATARATE_1000_KBIT :
		rf_setup &= ~NRF24_RFSETUP_RF_DR_LOW;
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	f023 0320 	bic.w	r3, r3, #32
 8003462:	b2db      	uxtb	r3, r3
 8003464:	73fb      	strb	r3, [r7, #15]
		rf_setup &= ~NRF24_RFSETUP_RF_DR_HIGH;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	f023 0308 	bic.w	r3, r3, #8
 800346c:	b2db      	uxtb	r3, r3
 800346e:	73fb      	strb	r3, [r7, #15]
		break;
 8003470:	e00a      	b.n	8003488 <nrf24_setup_rf+0x74>
	case NRF24_DATARATE_2000_KBIT :
		rf_setup &= ~NRF24_RFSETUP_RF_DR_LOW;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	f023 0320 	bic.w	r3, r3, #32
 8003478:	b2db      	uxtb	r3, r3
 800347a:	73fb      	strb	r3, [r7, #15]
		rf_setup |= NRF24_RFSETUP_RF_DR_HIGH;
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	f043 0308 	orr.w	r3, r3, #8
 8003482:	b2db      	uxtb	r3, r3
 8003484:	73fb      	strb	r3, [r7, #15]
		break;
 8003486:	bf00      	nop
	}

	rf_setup &= ~(NRF24_RFSETUP_RF_PWR_MASK << NRF24_RFSETUP_RF_PWR_OFFSET); // занулили
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	f023 0306 	bic.w	r3, r3, #6
 800348e:	b2db      	uxtb	r3, r3
 8003490:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (config->tx_power & NRF24_RFSETUP_RF_PWR_MASK) << NRF24_RFSETUP_RF_PWR_OFFSET; // записали
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	785b      	ldrb	r3, [r3, #1]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	b25b      	sxtb	r3, r3
 800349a:	f003 0306 	and.w	r3, r3, #6
 800349e:	b25a      	sxtb	r2, r3
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	b25b      	sxtb	r3, r3
 80034a4:	4313      	orrs	r3, r2
 80034a6:	b25b      	sxtb	r3, r3
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	73fb      	strb	r3, [r7, #15]

	nrf24_write_register(intf_ptr, NRF24_REGADDR_RF_SETUP, &rf_setup, 1);
 80034ac:	f107 020f 	add.w	r2, r7, #15
 80034b0:	2301      	movs	r3, #1
 80034b2:	2106      	movs	r1, #6
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff fe97 	bl	80031e8 <nrf24_write_register>

	uint8_t rf_channel = config->rf_channel;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	789b      	ldrb	r3, [r3, #2]
 80034be:	73bb      	strb	r3, [r7, #14]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_RF_CH, &rf_channel, 1);
 80034c0:	f107 020e 	add.w	r2, r7, #14
 80034c4:	2301      	movs	r3, #1
 80034c6:	2105      	movs	r1, #5
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff fe8d 	bl	80031e8 <nrf24_write_register>
	return 0;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <nrf24_setup_protocol>:


int nrf24_setup_protocol(void * intf_ptr, const nrf24_protocol_config_t * config)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
    uint8_t conf_reg = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	73fb      	strb	r3, [r7, #15]
    nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &conf_reg, 1);
 80034e6:	f107 020f 	add.w	r2, r7, #15
 80034ea:	2301      	movs	r3, #1
 80034ec:	2100      	movs	r1, #0
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff fe4b 	bl	800318a <nrf24_read_register>
    switch (config->crc_size)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d017      	beq.n	800352c <nrf24_setup_protocol+0x54>
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	dc20      	bgt.n	8003542 <nrf24_setup_protocol+0x6a>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <nrf24_setup_protocol+0x32>
 8003504:	2b01      	cmp	r3, #1
 8003506:	d006      	beq.n	8003516 <nrf24_setup_protocol+0x3e>
 8003508:	e01b      	b.n	8003542 <nrf24_setup_protocol+0x6a>
    {
    case NRF24_CRCSIZE_DISABLE:
    	conf_reg &= ~NRF24_CONFIG_EN_CRC;
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	f023 0308 	bic.w	r3, r3, #8
 8003510:	b2db      	uxtb	r3, r3
 8003512:	73fb      	strb	r3, [r7, #15]
    	break;
 8003514:	e015      	b.n	8003542 <nrf24_setup_protocol+0x6a>
    case NRF24_CRCSIZE_1BYTE :
    	conf_reg |= NRF24_CONFIG_EN_CRC;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	f043 0308 	orr.w	r3, r3, #8
 800351c:	b2db      	uxtb	r3, r3
 800351e:	73fb      	strb	r3, [r7, #15]
    	conf_reg &= ~NRF24_CONFIG_CRCO;
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	f023 0304 	bic.w	r3, r3, #4
 8003526:	b2db      	uxtb	r3, r3
 8003528:	73fb      	strb	r3, [r7, #15]
    	break;
 800352a:	e00a      	b.n	8003542 <nrf24_setup_protocol+0x6a>
    case NRF24_CRCSIZE_2BYTE :
    	conf_reg |= NRF24_CONFIG_EN_CRC;
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	f043 0308 	orr.w	r3, r3, #8
 8003532:	b2db      	uxtb	r3, r3
 8003534:	73fb      	strb	r3, [r7, #15]
    	conf_reg |= NRF24_CONFIG_CRCO;
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	f043 0304 	orr.w	r3, r3, #4
 800353c:	b2db      	uxtb	r3, r3
 800353e:	73fb      	strb	r3, [r7, #15]
    	break;
 8003540:	bf00      	nop
    }
    nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &conf_reg, 1);
 8003542:	f107 020f 	add.w	r2, r7, #15
 8003546:	2301      	movs	r3, #1
 8003548:	2100      	movs	r1, #0
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff fe4c 	bl	80031e8 <nrf24_write_register>

    uint8_t setup_aw = config->address_width;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	785b      	ldrb	r3, [r3, #1]
 8003554:	73bb      	strb	r3, [r7, #14]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_SETUP_AW, &setup_aw, 1);
 8003556:	f107 020e 	add.w	r2, r7, #14
 800355a:	2301      	movs	r3, #1
 800355c:	2103      	movs	r1, #3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff fe42 	bl	80031e8 <nrf24_write_register>

    uint8_t features = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	737b      	strb	r3, [r7, #13]
    if (config->en_ack_payload)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	78db      	ldrb	r3, [r3, #3]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d004      	beq.n	800357a <nrf24_setup_protocol+0xa2>
    {
    	features |= NRF24_FEATURE_EN_ACK_PAY;
 8003570:	7b7b      	ldrb	r3, [r7, #13]
 8003572:	f043 0302 	orr.w	r3, r3, #2
 8003576:	b2db      	uxtb	r3, r3
 8003578:	737b      	strb	r3, [r7, #13]
    }
    if (config->en_dyn_ack)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	791b      	ldrb	r3, [r3, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d004      	beq.n	800358c <nrf24_setup_protocol+0xb4>
    {
    	features |= NRF24_FEATURE_EN_DYN_ACK;
 8003582:	7b7b      	ldrb	r3, [r7, #13]
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	737b      	strb	r3, [r7, #13]
    }
    if (config->en_dyn_payload_size)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	789b      	ldrb	r3, [r3, #2]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d004      	beq.n	800359e <nrf24_setup_protocol+0xc6>
    {
    	features |= NRF24_FEATURE_EN_DPL;
 8003594:	7b7b      	ldrb	r3, [r7, #13]
 8003596:	f043 0304 	orr.w	r3, r3, #4
 800359a:	b2db      	uxtb	r3, r3
 800359c:	737b      	strb	r3, [r7, #13]
    }
    nrf24_write_register(intf_ptr, NRF24_REGADDR_FEATURE, &features, 1);
 800359e:	f107 020d 	add.w	r2, r7, #13
 80035a2:	2301      	movs	r3, #1
 80035a4:	211d      	movs	r1, #29
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff fe1e 	bl	80031e8 <nrf24_write_register>

    uint8_t setup_retr = (config->auto_retransmit_delay << 4) | (config->auto_retransmit_count & 0xf);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	799b      	ldrb	r3, [r3, #6]
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	b25a      	sxtb	r2, r3
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	795b      	ldrb	r3, [r3, #5]
 80035b8:	b25b      	sxtb	r3, r3
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	b25b      	sxtb	r3, r3
 80035c0:	4313      	orrs	r3, r2
 80035c2:	b25b      	sxtb	r3, r3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	733b      	strb	r3, [r7, #12]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_SETUP_RETR, &setup_retr, 1);
 80035c8:	f107 020c 	add.w	r2, r7, #12
 80035cc:	2301      	movs	r3, #1
 80035ce:	2104      	movs	r1, #4
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff fe09 	bl	80031e8 <nrf24_write_register>
	return 0;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <nrf24_pipe_rx_start>:


int nrf24_pipe_rx_start(void * intf_ptr, uint8_t pipe_no, const nrf24_pipe_config_t * config)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	460b      	mov	r3, r1
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	72fb      	strb	r3, [r7, #11]
	uint8_t en_aa = 0 ;
 80035ee:	2300      	movs	r3, #0
 80035f0:	75bb      	strb	r3, [r7, #22]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_EN_AA, &en_aa, 1);
 80035f2:	f107 0216 	add.w	r2, r7, #22
 80035f6:	2301      	movs	r3, #1
 80035f8:	2101      	movs	r1, #1
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f7ff fdc5 	bl	800318a <nrf24_read_register>
	if (config->enable_auto_ack)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00b      	beq.n	8003620 <nrf24_pipe_rx_start+0x40>
	{
		en_aa |= (1 << pipe_no);
 8003608:	7afb      	ldrb	r3, [r7, #11]
 800360a:	2201      	movs	r2, #1
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	b25a      	sxtb	r2, r3
 8003612:	7dbb      	ldrb	r3, [r7, #22]
 8003614:	b25b      	sxtb	r3, r3
 8003616:	4313      	orrs	r3, r2
 8003618:	b25b      	sxtb	r3, r3
 800361a:	b2db      	uxtb	r3, r3
 800361c:	75bb      	strb	r3, [r7, #22]
 800361e:	e00c      	b.n	800363a <nrf24_pipe_rx_start+0x5a>
	}
	else
	{
		en_aa &= ~(1 << pipe_no);
 8003620:	7afb      	ldrb	r3, [r7, #11]
 8003622:	2201      	movs	r2, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	b25b      	sxtb	r3, r3
 800362a:	43db      	mvns	r3, r3
 800362c:	b25a      	sxtb	r2, r3
 800362e:	7dbb      	ldrb	r3, [r7, #22]
 8003630:	b25b      	sxtb	r3, r3
 8003632:	4013      	ands	r3, r2
 8003634:	b25b      	sxtb	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	75bb      	strb	r3, [r7, #22]
	}
	nrf24_write_register(intf_ptr, NRF24_REGADDR_EN_AA, &en_aa, 1);
 800363a:	f107 0216 	add.w	r2, r7, #22
 800363e:	2301      	movs	r3, #1
 8003640:	2101      	movs	r1, #1
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f7ff fdd0 	bl	80031e8 <nrf24_write_register>

	uint8_t en_rxaddr = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	757b      	strb	r3, [r7, #21]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_EN_RXADDR, &en_rxaddr, 1);
 800364c:	f107 0215 	add.w	r2, r7, #21
 8003650:	2301      	movs	r3, #1
 8003652:	2102      	movs	r1, #2
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f7ff fd98 	bl	800318a <nrf24_read_register>
	en_rxaddr |= (1 << pipe_no);
 800365a:	7afb      	ldrb	r3, [r7, #11]
 800365c:	2201      	movs	r2, #1
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	b25a      	sxtb	r2, r3
 8003664:	7d7b      	ldrb	r3, [r7, #21]
 8003666:	b25b      	sxtb	r3, r3
 8003668:	4313      	orrs	r3, r2
 800366a:	b25b      	sxtb	r3, r3
 800366c:	b2db      	uxtb	r3, r3
 800366e:	757b      	strb	r3, [r7, #21]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_EN_RXADDR, &en_rxaddr, 1);
 8003670:	f107 0215 	add.w	r2, r7, #21
 8003674:	2301      	movs	r3, #1
 8003676:	2102      	movs	r1, #2
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f7ff fdb5 	bl	80031e8 <nrf24_write_register>

	uint8_t rx_pw = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	75fb      	strb	r3, [r7, #23]
	switch (pipe_no)
 8003682:	7afb      	ldrb	r3, [r7, #11]
 8003684:	2b05      	cmp	r3, #5
 8003686:	d851      	bhi.n	800372c <nrf24_pipe_rx_start+0x14c>
 8003688:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <nrf24_pipe_rx_start+0xb0>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036a9 	.word	0x080036a9
 8003694:	080036bf 	.word	0x080036bf
 8003698:	080036d5 	.word	0x080036d5
 800369c:	080036eb 	.word	0x080036eb
 80036a0:	08003701 	.word	0x08003701
 80036a4:	08003717 	.word	0x08003717
	{
	case 0:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P0, (uint8_t *)(&config->address), 5);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f103 0208 	add.w	r2, r3, #8
 80036ae:	2305      	movs	r3, #5
 80036b0:	210a      	movs	r1, #10
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f7ff fd98 	bl	80031e8 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P0;
 80036b8:	2311      	movs	r3, #17
 80036ba:	75fb      	strb	r3, [r7, #23]
		break;
 80036bc:	e036      	b.n	800372c <nrf24_pipe_rx_start+0x14c>
	case 1:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P1, (uint8_t *)(&config->address), 5);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f103 0208 	add.w	r2, r3, #8
 80036c4:	2305      	movs	r3, #5
 80036c6:	210b      	movs	r1, #11
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f7ff fd8d 	bl	80031e8 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P1;
 80036ce:	2312      	movs	r3, #18
 80036d0:	75fb      	strb	r3, [r7, #23]
		break;
 80036d2:	e02b      	b.n	800372c <nrf24_pipe_rx_start+0x14c>
	case 2:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P2, ((uint8_t *)(&config->address) + 4), 1);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3308      	adds	r3, #8
 80036d8:	1d1a      	adds	r2, r3, #4
 80036da:	2301      	movs	r3, #1
 80036dc:	210c      	movs	r1, #12
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f7ff fd82 	bl	80031e8 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P2;
 80036e4:	2313      	movs	r3, #19
 80036e6:	75fb      	strb	r3, [r7, #23]
		break;
 80036e8:	e020      	b.n	800372c <nrf24_pipe_rx_start+0x14c>
	case 3:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P3, ((uint8_t *)(&config->address) + 4), 1);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3308      	adds	r3, #8
 80036ee:	1d1a      	adds	r2, r3, #4
 80036f0:	2301      	movs	r3, #1
 80036f2:	210d      	movs	r1, #13
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f7ff fd77 	bl	80031e8 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P3;
 80036fa:	2314      	movs	r3, #20
 80036fc:	75fb      	strb	r3, [r7, #23]
		break;
 80036fe:	e015      	b.n	800372c <nrf24_pipe_rx_start+0x14c>
	case 4:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P4, ((uint8_t *)(&config->address) + 4), 1);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3308      	adds	r3, #8
 8003704:	1d1a      	adds	r2, r3, #4
 8003706:	2301      	movs	r3, #1
 8003708:	210e      	movs	r1, #14
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f7ff fd6c 	bl	80031e8 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P4;
 8003710:	2315      	movs	r3, #21
 8003712:	75fb      	strb	r3, [r7, #23]
		break;
 8003714:	e00a      	b.n	800372c <nrf24_pipe_rx_start+0x14c>
	case 5:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P5, ((uint8_t *)(&config->address) + 4), 1);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3308      	adds	r3, #8
 800371a:	1d1a      	adds	r2, r3, #4
 800371c:	2301      	movs	r3, #1
 800371e:	210f      	movs	r1, #15
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f7ff fd61 	bl	80031e8 <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P5;
 8003726:	2316      	movs	r3, #22
 8003728:	75fb      	strb	r3, [r7, #23]
		break;
 800372a:	bf00      	nop
	}

	uint8_t dynpd = 0;
 800372c:	2300      	movs	r3, #0
 800372e:	753b      	strb	r3, [r7, #20]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_DYNPD, &dynpd, 1);
 8003730:	f107 0214 	add.w	r2, r7, #20
 8003734:	2301      	movs	r3, #1
 8003736:	211c      	movs	r1, #28
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f7ff fd26 	bl	800318a <nrf24_read_register>
	if (config->payload_size >= 0)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	db15      	blt.n	8003774 <nrf24_pipe_rx_start+0x194>
	{
		nrf24_write_register(intf_ptr, rx_pw, (uint8_t *)(&config->payload_size), 1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f103 0210 	add.w	r2, r3, #16
 800374e:	7df9      	ldrb	r1, [r7, #23]
 8003750:	2301      	movs	r3, #1
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f7ff fd48 	bl	80031e8 <nrf24_write_register>
		dynpd &= ~(1 << pipe_no);
 8003758:	7afb      	ldrb	r3, [r7, #11]
 800375a:	2201      	movs	r2, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	b25b      	sxtb	r3, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	b25a      	sxtb	r2, r3
 8003766:	7d3b      	ldrb	r3, [r7, #20]
 8003768:	b25b      	sxtb	r3, r3
 800376a:	4013      	ands	r3, r2
 800376c:	b25b      	sxtb	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	753b      	strb	r3, [r7, #20]
 8003772:	e013      	b.n	800379c <nrf24_pipe_rx_start+0x1bc>
	}
	else
	{
		uint8_t pld_size = 32; // Нужно записать не 0, чтобы пайп в целом работал
 8003774:	2320      	movs	r3, #32
 8003776:	74fb      	strb	r3, [r7, #19]
		nrf24_write_register(intf_ptr, rx_pw, &pld_size, 1);
 8003778:	f107 0213 	add.w	r2, r7, #19
 800377c:	7df9      	ldrb	r1, [r7, #23]
 800377e:	2301      	movs	r3, #1
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7ff fd31 	bl	80031e8 <nrf24_write_register>
		dynpd |= (1 << pipe_no);
 8003786:	7afb      	ldrb	r3, [r7, #11]
 8003788:	2201      	movs	r2, #1
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	b25a      	sxtb	r2, r3
 8003790:	7d3b      	ldrb	r3, [r7, #20]
 8003792:	b25b      	sxtb	r3, r3
 8003794:	4313      	orrs	r3, r2
 8003796:	b25b      	sxtb	r3, r3
 8003798:	b2db      	uxtb	r3, r3
 800379a:	753b      	strb	r3, [r7, #20]
	}
	nrf24_write_register(intf_ptr, NRF24_REGADDR_DYNPD, &dynpd, 1);
 800379c:	f107 0214 	add.w	r2, r7, #20
 80037a0:	2301      	movs	r3, #1
 80037a2:	211c      	movs	r1, #28
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7ff fd1f 	bl	80031e8 <nrf24_write_register>

	return 0;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <nrf24_pipe_set_tx_addr>:
	return 0;
}


int nrf24_pipe_set_tx_addr(void * intf_ptr, uint64_t tx_addr)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	e9c7 2300 	strd	r2, r3, [r7]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_TX_ADDR, (uint8_t *)(&tx_addr), 5);
 80037c0:	463a      	mov	r2, r7
 80037c2:	2305      	movs	r3, #5
 80037c4:	2110      	movs	r1, #16
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f7ff fd0e 	bl	80031e8 <nrf24_write_register>
	return 0;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <nrf24_mode_standby>:
	return 0;
}


int nrf24_mode_standby(void * intf_ptr)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
	uint8_t config_reg = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 80037e2:	f107 020f 	add.w	r2, r7, #15
 80037e6:	2301      	movs	r3, #1
 80037e8:	2100      	movs	r1, #0
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff fccd 	bl	800318a <nrf24_read_register>
	config_reg |= NRF24_CONFIG_PWR_UP;
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	f043 0302 	orr.w	r3, r3, #2
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 80037fa:	f107 020f 	add.w	r2, r7, #15
 80037fe:	2301      	movs	r3, #1
 8003800:	2100      	movs	r1, #0
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff fcf0 	bl	80031e8 <nrf24_write_register>
	nrf24_ce_activate(intf_ptr, false);
 8003808:	2100      	movs	r1, #0
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fdb1 	bl	8003372 <nrf24_ce_activate>
	return 0;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <nrf24_mode_tx>:


int nrf24_mode_tx(void * intf_ptr)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
	uint8_t mode_tx = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &mode_tx, 1);
 8003826:	f107 020f 	add.w	r2, r7, #15
 800382a:	2301      	movs	r3, #1
 800382c:	2100      	movs	r1, #0
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff fcab 	bl	800318a <nrf24_read_register>
	mode_tx &= ~NRF24_CONFIG_PRIM_RX;
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	b2db      	uxtb	r3, r3
 800383c:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &mode_tx, 1);
 800383e:	f107 020f 	add.w	r2, r7, #15
 8003842:	2301      	movs	r3, #1
 8003844:	2100      	movs	r1, #0
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff fcce 	bl	80031e8 <nrf24_write_register>
	nrf24_ce_activate(intf_ptr, true);
 800384c:	2101      	movs	r1, #1
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff fd8f 	bl	8003372 <nrf24_ce_activate>
	return 0;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <nrf24_fifo_status>:
	return 0;
}


int nrf24_fifo_status(void * intf_ptr, nrf24_fifo_status_t * rx_status, nrf24_fifo_status_t * tx_status)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b086      	sub	sp, #24
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
	uint8_t fifo_satus = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	75fb      	strb	r3, [r7, #23]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_FIFO_STATUS, &fifo_satus, 1);
 800386e:	f107 0217 	add.w	r2, r7, #23
 8003872:	2301      	movs	r3, #1
 8003874:	2117      	movs	r1, #23
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f7ff fc87 	bl	800318a <nrf24_read_register>

	*rx_status = NRF24_FIFO_NOT_EMPTY;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2201      	movs	r2, #1
 8003880:	701a      	strb	r2, [r3, #0]
	if (((fifo_satus >> NRF24_FIFO_STATUS_RX_EMPTY_OFFSET) & NRF24_FIFO_STATUS_RX_EMPTY_MASK) == 1)
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <nrf24_fifo_status+0x34>
	{
		*rx_status = NRF24_FIFO_EMPTY;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2200      	movs	r2, #0
 8003890:	701a      	strb	r2, [r3, #0]
	}
	if (((fifo_satus >> NRF24_FIFO_STATUS_RX_FULL_OFFSET) & NRF24_FIFO_STATUS_RX_FULL_MASK) == 1)
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <nrf24_fifo_status+0x48>
	{
		*rx_status = NRF24_FIFO_FULL;
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2202      	movs	r2, #2
 80038a4:	701a      	strb	r2, [r3, #0]
	}

	*tx_status = NRF24_FIFO_NOT_EMPTY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
	if (((fifo_satus >> NRF24_FIFO_STATUS_TX_EMPTY_OFFSET) & NRF24_FIFO_STATUS_TX_EMPTY_MASK) == 1)
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	091b      	lsrs	r3, r3, #4
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <nrf24_fifo_status+0x62>
	{
		*tx_status = NRF24_FIFO_EMPTY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]
	}
	if (((fifo_satus >> NRF24_FIFO_STATUS_TX_FULL_OFFSET) & NRF24_FIFO_STATUS_TX_FULL_MASK) == 1)
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <nrf24_fifo_status+0x76>
	{
		*tx_status = NRF24_FIFO_FULL;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2202      	movs	r2, #2
 80038d2:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <nrf24_fifo_write>:
	return payload_size;
}


int nrf24_fifo_write(void * intf_ptr, const uint8_t * packet, uint8_t packet_size, bool use_ack)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	4611      	mov	r1, r2
 80038ea:	461a      	mov	r2, r3
 80038ec:	460b      	mov	r3, r1
 80038ee:	71fb      	strb	r3, [r7, #7]
 80038f0:	4613      	mov	r3, r2
 80038f2:	71bb      	strb	r3, [r7, #6]
	if (packet_size == 0)
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <nrf24_fifo_write+0x20>
	{
		return 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e011      	b.n	8003922 <nrf24_fifo_write+0x44>
	}
	if (packet_size <= 32)
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	2b20      	cmp	r3, #32
 8003902:	d807      	bhi.n	8003914 <nrf24_fifo_write+0x36>
	{
		nrf24_write_tx_payload(intf_ptr, packet,  packet_size,  use_ack);
 8003904:	79fa      	ldrb	r2, [r7, #7]
 8003906:	79bb      	ldrb	r3, [r7, #6]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f7ff fca0 	bl	8003250 <nrf24_write_tx_payload>
		return packet_size;
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	e006      	b.n	8003922 <nrf24_fifo_write+0x44>
	}
	else
	{
		nrf24_write_tx_payload(intf_ptr, packet,  32,  use_ack);
 8003914:	79bb      	ldrb	r3, [r7, #6]
 8003916:	2220      	movs	r2, #32
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7ff fc98 	bl	8003250 <nrf24_write_tx_payload>
		return 32;
 8003920:	2320      	movs	r3, #32
	}
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <nrf24_fifo_flush_tx>:
	}
}


int nrf24_fifo_flush_tx(void * intf_ptr)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
	nrf24_flush_tx(intf_ptr);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff fcdc 	bl	80032f0 <nrf24_flush_tx>
	return 0;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <nrf24_fifo_flush_rx>:


int nrf24_fifo_flush_rx(void * intf_ptr)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
	nrf24_flush_rx(intf_ptr);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff fcb1 	bl	80032b2 <nrf24_flush_rx>
	return 0;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <nrf24_irq_get>:
	return 0;
}


int nrf24_irq_get(void * intf_ptr, int * composition)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
	uint8_t status_reg = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	73fb      	strb	r3, [r7, #15]
	nrf24_get_status(intf_ptr, &status_reg);
 8003968:	f107 030f 	add.w	r3, r7, #15
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff fcdd 	bl	800332e <nrf24_get_status>
	*composition = (status_reg >> NRF24_STATUS_FLAG_OFFSET) & NRF24_STATUS_FLAG_MASK;
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f003 0207 	and.w	r2, r3, #7
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	601a      	str	r2, [r3, #0]
	return 0;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <nrf24_irq_clear>:


int nrf24_irq_clear(void * intf_ptr, int composition)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
	uint8_t status_reg = (composition & NRF24_STATUS_FLAG_MASK) << NRF24_STATUS_FLAG_OFFSET;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_STATUS, &status_reg, 1);
 80039a4:	f107 020f 	add.w	r2, r7, #15
 80039a8:	2301      	movs	r3, #1
 80039aa:	2107      	movs	r1, #7
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fc1b 	bl	80031e8 <nrf24_write_register>
	return 0;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <__libc_init_array>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	4d0d      	ldr	r5, [pc, #52]	; (80039f4 <__libc_init_array+0x38>)
 80039c0:	4c0d      	ldr	r4, [pc, #52]	; (80039f8 <__libc_init_array+0x3c>)
 80039c2:	1b64      	subs	r4, r4, r5
 80039c4:	10a4      	asrs	r4, r4, #2
 80039c6:	2600      	movs	r6, #0
 80039c8:	42a6      	cmp	r6, r4
 80039ca:	d109      	bne.n	80039e0 <__libc_init_array+0x24>
 80039cc:	4d0b      	ldr	r5, [pc, #44]	; (80039fc <__libc_init_array+0x40>)
 80039ce:	4c0c      	ldr	r4, [pc, #48]	; (8003a00 <__libc_init_array+0x44>)
 80039d0:	f000 f820 	bl	8003a14 <_init>
 80039d4:	1b64      	subs	r4, r4, r5
 80039d6:	10a4      	asrs	r4, r4, #2
 80039d8:	2600      	movs	r6, #0
 80039da:	42a6      	cmp	r6, r4
 80039dc:	d105      	bne.n	80039ea <__libc_init_array+0x2e>
 80039de:	bd70      	pop	{r4, r5, r6, pc}
 80039e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e4:	4798      	blx	r3
 80039e6:	3601      	adds	r6, #1
 80039e8:	e7ee      	b.n	80039c8 <__libc_init_array+0xc>
 80039ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ee:	4798      	blx	r3
 80039f0:	3601      	adds	r6, #1
 80039f2:	e7f2      	b.n	80039da <__libc_init_array+0x1e>
 80039f4:	08003a44 	.word	0x08003a44
 80039f8:	08003a44 	.word	0x08003a44
 80039fc:	08003a44 	.word	0x08003a44
 8003a00:	08003a48 	.word	0x08003a48

08003a04 <memset>:
 8003a04:	4402      	add	r2, r0
 8003a06:	4603      	mov	r3, r0
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d100      	bne.n	8003a0e <memset+0xa>
 8003a0c:	4770      	bx	lr
 8003a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a12:	e7f9      	b.n	8003a08 <memset+0x4>

08003a14 <_init>:
 8003a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a16:	bf00      	nop
 8003a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1a:	bc08      	pop	{r3}
 8003a1c:	469e      	mov	lr, r3
 8003a1e:	4770      	bx	lr

08003a20 <_fini>:
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	bf00      	nop
 8003a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a26:	bc08      	pop	{r3}
 8003a28:	469e      	mov	lr, r3
 8003a2a:	4770      	bx	lr
