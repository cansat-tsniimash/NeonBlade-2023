
da_nrf_blade.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b54  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002cec  08002cec  00012cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cfc  08002cfc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002cfc  08002cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d04  08002d04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d04  08002d04  00012d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d08  08002d08  00012d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08002d18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002d18  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096d9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001805  00000000  00000000  00029715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0002af20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  0002b670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f28  00000000  00000000  0002bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008998  00000000  00000000  00041c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008695e  00000000  00000000  0004a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0f16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c24  00000000  00000000  000d0f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002cd4 	.word	0x08002cd4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002cd4 	.word	0x08002cd4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <app_main>:




int app_main()
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b0a4      	sub	sp, #144	; 0x90
 80004d4:	af00      	add	r7, sp, #0

	packet_ma_type_1_t packet_ma_type_1 = {1};
 80004d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004da:	2220      	movs	r2, #32
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f002 fbf0 	bl	8002cc4 <memset>
 80004e4:	2301      	movs	r3, #1
 80004e6:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

	lsmset(&ctx, &lsm_spi);*/

	//Создаем и настраиваем дескриптор радиомодуля nRF24L01
	nrf24_spi_pins_t nrf24_spi_pins;
	nrf24_spi_pins.ce_pin = GPIO_PIN_9;
 80004ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004ee:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	nrf24_spi_pins.ce_port = GPIOB;
 80004f2:	4b56      	ldr	r3, [pc, #344]	; (800064c <app_main+0x17c>)
 80004f4:	65fb      	str	r3, [r7, #92]	; 0x5c
	nrf24_spi_pins.cs_pin = GPIO_PIN_8;
 80004f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004fa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	nrf24_spi_pins.cs_port = GPIOB;
 80004fe:	4b53      	ldr	r3, [pc, #332]	; (800064c <app_main+0x17c>)
 8000500:	667b      	str	r3, [r7, #100]	; 0x64
	nrf24_lower_api_config_t nrf24_api_config;
	nrf24_spi_init(&nrf24_api_config, &hspi2, &nrf24_spi_pins);
 8000502:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8000506:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800050a:	4951      	ldr	r1, [pc, #324]	; (8000650 <app_main+0x180>)
 800050c:	4618      	mov	r0, r3
 800050e:	f002 f8df 	bl	80026d0 <nrf24_spi_init>

	//Перед настройкой регистров радио переводим его в standby mode
	nrf24_mode_standby(&nrf24_api_config);
 8000512:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000516:	4618      	mov	r0, r3
 8000518:	f002 fac6 	bl	8002aa8 <nrf24_mode_standby>

	// Настраиваем параметры радиопередачи
	nrf24_rf_config_t nrf24_rf_config;
	nrf24_rf_config.data_rate = NRF24_DATARATE_250_KBIT;
 800051c:	2300      	movs	r3, #0
 800051e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	nrf24_rf_config.rf_channel = 100;
 8000522:	2364      	movs	r3, #100	; 0x64
 8000524:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	nrf24_rf_config.tx_power = NRF24_TXPOWER_MINUS_0_DBM;
 8000528:	2303      	movs	r3, #3
 800052a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	nrf24_setup_rf(&nrf24_api_config, &nrf24_rf_config);
 800052e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000532:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000536:	4611      	mov	r1, r2
 8000538:	4618      	mov	r0, r3
 800053a:	f002 f8e5 	bl	8002708 <nrf24_setup_rf>

	// Настраиваем протокол радиопередачи
	nrf24_protocol_config_t nrf24_protocol_config;
	nrf24_protocol_config.address_width = NRF24_ADDRES_WIDTH_5_BYTES;
 800053e:	2303      	movs	r3, #3
 8000540:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	nrf24_protocol_config.auto_retransmit_count = 15;
 8000544:	230f      	movs	r3, #15
 8000546:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	nrf24_protocol_config.auto_retransmit_delay = 15;
 800054a:	230f      	movs	r3, #15
 800054c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	nrf24_protocol_config.crc_size = NRF24_CRCSIZE_1BYTE;
 8000550:	2301      	movs	r3, #1
 8000552:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	nrf24_protocol_config.en_ack_payload = false;
 8000556:	2300      	movs	r3, #0
 8000558:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	nrf24_protocol_config.en_dyn_ack = false;
 800055c:	2300      	movs	r3, #0
 800055e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	nrf24_protocol_config.en_dyn_payload_size = false;
 8000562:	2300      	movs	r3, #0
 8000564:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	nrf24_setup_protocol(&nrf24_api_config, &nrf24_protocol_config);
 8000568:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800056c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000570:	4611      	mov	r1, r2
 8000572:	4618      	mov	r0, r3
 8000574:	f002 f92a 	bl	80027cc <nrf24_setup_protocol>


	//Настраиваем пайп 0 для приема
	nrf24_pipe_config_t pipe_config;
	pipe_config.enable_auto_ack = false;
 8000578:	2300      	movs	r3, #0
 800057a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pipe_config.payload_size = 32;
 800057e:	2320      	movs	r3, #32
 8000580:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	pipe_config.address = DA1_NRF_ADDR;
 8000584:	f04f 32cf 	mov.w	r2, #3486502863	; 0xcfcfcfcf
 8000588:	f04f 03cf 	mov.w	r3, #207	; 0xcf
 800058c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	nrf24_pipe_rx_start(&nrf24_api_config, 0, &pipe_config);
 8000590:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000594:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f002 f99a 	bl	80028d4 <nrf24_pipe_rx_start>



	int16_t er_rf_wr = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint8_t status;

	uint8_t rx_buffer[32] = {0};
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]
 80005ba:	615a      	str	r2, [r3, #20]
 80005bc:	619a      	str	r2, [r3, #24]
//	uint8_t tx_buffer[32] = {0};

	nrf24_fifo_status_t rx_status = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	71fb      	strb	r3, [r7, #7]
    nrf24_fifo_status_t tx_status = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	71bb      	strb	r3, [r7, #6]
    nrf24_irq_clear(&nrf24_api_config, NRF24_IRQ_TX_DR | NRF24_IRQ_RX_DR |NRF24_IRQ_MAX_RT);
 80005c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005ca:	2107      	movs	r1, #7
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 fb3d 	bl	8002c4c <nrf24_irq_clear>
    nrf24_fifo_flush_rx(&nrf24_api_config);
 80005d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fb13 	bl	8002c02 <nrf24_fifo_flush_rx>
    nrf24_fifo_flush_tx(&nrf24_api_config);
 80005dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 fb02 	bl	8002bea <nrf24_fifo_flush_tx>
    nrf24_mode_rx(&nrf24_api_config);
 80005e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fa7e 	bl	8002aec <nrf24_mode_rx>
	*/

	int composit;
	while(1)
	{
		nrf24_irq_get(&nrf24_api_config, &composit);
 80005f0:	463a      	mov	r2, r7
 80005f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005f6:	4611      	mov	r1, r2
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 fb0e 	bl	8002c1a <nrf24_irq_get>
		if((composit & NRF24_IRQ_RX_DR) != 0)
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	f003 0304 	and.w	r3, r3, #4
 8000604:	2b00      	cmp	r3, #0
 8000606:	d010      	beq.n	800062a <app_main+0x15a>
		{
			HAL_GPIO_WritePin(GPIOC , GPIO_PIN_13, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060e:	4811      	ldr	r0, [pc, #68]	; (8000654 <app_main+0x184>)
 8000610:	f000 fcfc 	bl	800100c <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000614:	2064      	movs	r0, #100	; 0x64
 8000616:	f000 fa6b 	bl	8000af0 <HAL_Delay>
			nrf24_fifo_read(&nrf24_api_config, rx_buffer, 32);
 800061a:	f107 0108 	add.w	r1, r7, #8
 800061e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000622:	2220      	movs	r2, #32
 8000624:	4618      	mov	r0, r3
 8000626:	f002 fac3 	bl	8002bb0 <nrf24_fifo_read>
		}

		HAL_GPIO_WritePin(GPIOC , GPIO_PIN_13, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000630:	4808      	ldr	r0, [pc, #32]	; (8000654 <app_main+0x184>)
 8000632:	f000 fceb 	bl	800100c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000636:	2064      	movs	r0, #100	; 0x64
 8000638:	f000 fa5a 	bl	8000af0 <HAL_Delay>
		nrf24_fifo_status(&nrf24_api_config, &rx_status, &tx_status);
 800063c:	1dba      	adds	r2, r7, #6
 800063e:	1df9      	adds	r1, r7, #7
 8000640:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000644:	4618      	mov	r0, r3
 8000646:	f002 fa73 	bl	8002b30 <nrf24_fifo_status>
		nrf24_irq_get(&nrf24_api_config, &composit);
 800064a:	e7d1      	b.n	80005f0 <app_main+0x120>
 800064c:	40020400 	.word	0x40020400
 8000650:	20000028 	.word	0x20000028
 8000654:	40020800 	.word	0x40020800

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 f9d6 	bl	8000a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f808 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 f89a 	bl	800079c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000668:	f000 f862 	bl	8000730 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 800066c:	f7ff ff30 	bl	80004d0 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000670:	e7fe      	b.n	8000670 <main+0x18>
	...

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fb1e 	bl	8002cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xb4>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <SystemClock_Config+0xb4>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystemClock_Config+0xb4>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <SystemClock_Config+0xb8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a1b      	ldr	r2, [pc, #108]	; (800072c <SystemClock_Config+0xb8>)
 80006be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <SystemClock_Config+0xb8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2310      	movs	r3, #16
 80006da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006dc:	2300      	movs	r3, #0
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fcab 	bl	8001040 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006f0:	f000 f8b0 	bl	8000854 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f000 ff0e 	bl	8001530 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800071a:	f000 f89b 	bl	8000854 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_SPI2_Init+0x64>)
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <MX_SPI2_Init+0x68>)
 8000738:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_SPI2_Init+0x64>)
 800073c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000740:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_SPI2_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_SPI2_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_SPI2_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_SPI2_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_SPI2_Init+0x64>)
 800075c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000760:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_SPI2_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_SPI2_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_SPI2_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_SPI2_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_SPI2_Init+0x64>)
 800077c:	220a      	movs	r2, #10
 800077e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_SPI2_Init+0x64>)
 8000782:	f001 f871 	bl	8001868 <HAL_SPI_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800078c:	f000 f862 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000028 	.word	0x20000028
 8000798:	40003800 	.word	0x40003800

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b24      	ldr	r3, [pc, #144]	; (8000848 <MX_GPIO_Init+0xac>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a23      	ldr	r2, [pc, #140]	; (8000848 <MX_GPIO_Init+0xac>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_GPIO_Init+0xac>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_GPIO_Init+0xac>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a1c      	ldr	r2, [pc, #112]	; (8000848 <MX_GPIO_Init+0xac>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_GPIO_Init+0xac>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f0:	4816      	ldr	r0, [pc, #88]	; (800084c <MX_GPIO_Init+0xb0>)
 80007f2:	f000 fc0b 	bl	800100c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_NRF_Pin|CE_NRF_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80007fc:	4814      	ldr	r0, [pc, #80]	; (8000850 <MX_GPIO_Init+0xb4>)
 80007fe:	f000 fc05 	bl	800100c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4619      	mov	r1, r3
 800081a:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_GPIO_Init+0xb0>)
 800081c:	f000 fa72 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_NRF_Pin CE_NRF_Pin */
  GPIO_InitStruct.Pin = CS_NRF_Pin|CE_NRF_Pin;
 8000820:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_GPIO_Init+0xb4>)
 800083a:	f000 fa63 	bl	8000d04 <HAL_GPIO_Init>

}
 800083e:	bf00      	nop
 8000840:	3720      	adds	r7, #32
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40020800 	.word	0x40020800
 8000850:	40020400 	.word	0x40020400

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <HAL_MspInit+0x4c>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_MspInit+0x4c>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	6413      	str	r3, [r2, #64]	; 0x40
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800

080008b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a19      	ldr	r2, [pc, #100]	; (8000934 <HAL_SPI_MspInit+0x84>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d12c      	bne.n	800092c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <HAL_SPI_MspInit+0x88>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <HAL_SPI_MspInit+0x88>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <HAL_SPI_MspInit+0x88>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <HAL_SPI_MspInit+0x88>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a10      	ldr	r2, [pc, #64]	; (8000938 <HAL_SPI_MspInit+0x88>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_SPI_MspInit+0x88>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800090a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800090e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800091c:	2305      	movs	r3, #5
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <HAL_SPI_MspInit+0x8c>)
 8000928:	f000 f9ec 	bl	8000d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40003800 	.word	0x40003800
 8000938:	40023800 	.word	0x40023800
 800093c:	40020400 	.word	0x40020400

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <NMI_Handler+0x4>

08000946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <MemManage_Handler+0x4>

08000952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <UsageFault_Handler+0x4>

0800095e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098c:	f000 f890 	bl	8000ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SystemInit+0x20>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <SystemInit+0x20>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009be:	490e      	ldr	r1, [pc, #56]	; (80009f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009c0:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009d4:	4c0b      	ldr	r4, [pc, #44]	; (8000a04 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009e2:	f7ff ffd7 	bl	8000994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e6:	f002 f949 	bl	8002c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ea:	f7ff fe35 	bl	8000658 <main>
  bx  lr    
 80009ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009fc:	08002d0c 	.word	0x08002d0c
  ldr r2, =_sbss
 8000a00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a04:	20000084 	.word	0x20000084

08000a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC_IRQHandler>
	...

08000a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <HAL_Init+0x40>)
 8000a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_Init+0x40>)
 8000a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_Init+0x40>)
 8000a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 f931 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3a:	200f      	movs	r0, #15
 8000a3c:	f000 f808 	bl	8000a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a40:	f7ff ff0e 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023c00 	.word	0x40023c00

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_InitTick+0x54>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x58>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f93b 	bl	8000cea <HAL_SYSTICK_Config>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00e      	b.n	8000a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d80a      	bhi.n	8000a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f000 f911 	bl	8000cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <HAL_InitTick+0x5c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x20>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x24>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_IncTick+0x24>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000080 	.word	0x20000080

08000ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <HAL_GetTick+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000080 	.word	0x20000080

08000af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff ffee 	bl	8000ad8 <HAL_GetTick>
 8000afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b08:	d005      	beq.n	8000b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <HAL_Delay+0x44>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b16:	bf00      	nop
 8000b18:	f7ff ffde 	bl	8000ad8 <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8f7      	bhi.n	8000b18 <HAL_Delay+0x28>
  {
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	; (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	; 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	; 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f7ff ff8e 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff47 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff5c 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ff8e 	bl	8000bf0 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff5d 	bl	8000b9c <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffb0 	bl	8000c58 <SysTick_Config>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e159      	b.n	8000fd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f040 8148 	bne.w	8000fce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d005      	beq.n	8000d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d130      	bne.n	8000db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	091b      	lsrs	r3, r3, #4
 8000da2:	f003 0201 	and.w	r2, r3, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d017      	beq.n	8000df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d123      	bne.n	8000e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	691a      	ldr	r2, [r3, #16]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3208      	adds	r2, #8
 8000e42:	69b9      	ldr	r1, [r7, #24]
 8000e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0203 	and.w	r2, r3, #3
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80a2 	beq.w	8000fce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b57      	ldr	r3, [pc, #348]	; (8000fec <HAL_GPIO_Init+0x2e8>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a56      	ldr	r2, [pc, #344]	; (8000fec <HAL_GPIO_Init+0x2e8>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b54      	ldr	r3, [pc, #336]	; (8000fec <HAL_GPIO_Init+0x2e8>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea6:	4a52      	ldr	r2, [pc, #328]	; (8000ff0 <HAL_GPIO_Init+0x2ec>)
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a49      	ldr	r2, [pc, #292]	; (8000ff4 <HAL_GPIO_Init+0x2f0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d019      	beq.n	8000f06 <HAL_GPIO_Init+0x202>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a48      	ldr	r2, [pc, #288]	; (8000ff8 <HAL_GPIO_Init+0x2f4>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d013      	beq.n	8000f02 <HAL_GPIO_Init+0x1fe>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a47      	ldr	r2, [pc, #284]	; (8000ffc <HAL_GPIO_Init+0x2f8>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d00d      	beq.n	8000efe <HAL_GPIO_Init+0x1fa>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a46      	ldr	r2, [pc, #280]	; (8001000 <HAL_GPIO_Init+0x2fc>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d007      	beq.n	8000efa <HAL_GPIO_Init+0x1f6>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a45      	ldr	r2, [pc, #276]	; (8001004 <HAL_GPIO_Init+0x300>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d101      	bne.n	8000ef6 <HAL_GPIO_Init+0x1f2>
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	e008      	b.n	8000f08 <HAL_GPIO_Init+0x204>
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	e006      	b.n	8000f08 <HAL_GPIO_Init+0x204>
 8000efa:	2303      	movs	r3, #3
 8000efc:	e004      	b.n	8000f08 <HAL_GPIO_Init+0x204>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e002      	b.n	8000f08 <HAL_GPIO_Init+0x204>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <HAL_GPIO_Init+0x204>
 8000f06:	2300      	movs	r3, #0
 8000f08:	69fa      	ldr	r2, [r7, #28]
 8000f0a:	f002 0203 	and.w	r2, r2, #3
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	4093      	lsls	r3, r2
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f18:	4935      	ldr	r1, [pc, #212]	; (8000ff0 <HAL_GPIO_Init+0x2ec>)
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f26:	4b38      	ldr	r3, [pc, #224]	; (8001008 <HAL_GPIO_Init+0x304>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f4a:	4a2f      	ldr	r2, [pc, #188]	; (8001008 <HAL_GPIO_Init+0x304>)
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <HAL_GPIO_Init+0x304>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f74:	4a24      	ldr	r2, [pc, #144]	; (8001008 <HAL_GPIO_Init+0x304>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_GPIO_Init+0x304>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f9e:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <HAL_GPIO_Init+0x304>)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_GPIO_Init+0x304>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc8:	4a0f      	ldr	r2, [pc, #60]	; (8001008 <HAL_GPIO_Init+0x304>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	61fb      	str	r3, [r7, #28]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	f67f aea2 	bls.w	8000d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40013800 	.word	0x40013800
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	40020400 	.word	0x40020400
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40020c00 	.word	0x40020c00
 8001004:	40021000 	.word	0x40021000
 8001008:	40013c00 	.word	0x40013c00

0800100c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]
 8001018:	4613      	mov	r3, r2
 800101a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800101c:	787b      	ldrb	r3, [r7, #1]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001022:	887a      	ldrh	r2, [r7, #2]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001028:	e003      	b.n	8001032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	041a      	lsls	r2, r3, #16
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	619a      	str	r2, [r3, #24]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e264      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b00      	cmp	r3, #0
 800105c:	d075      	beq.n	800114a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800105e:	4ba3      	ldr	r3, [pc, #652]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 030c 	and.w	r3, r3, #12
 8001066:	2b04      	cmp	r3, #4
 8001068:	d00c      	beq.n	8001084 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800106a:	4ba0      	ldr	r3, [pc, #640]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001072:	2b08      	cmp	r3, #8
 8001074:	d112      	bne.n	800109c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001076:	4b9d      	ldr	r3, [pc, #628]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001082:	d10b      	bne.n	800109c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001084:	4b99      	ldr	r3, [pc, #612]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d05b      	beq.n	8001148 <HAL_RCC_OscConfig+0x108>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d157      	bne.n	8001148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e23f      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a4:	d106      	bne.n	80010b4 <HAL_RCC_OscConfig+0x74>
 80010a6:	4b91      	ldr	r3, [pc, #580]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a90      	ldr	r2, [pc, #576]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80010ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	e01d      	b.n	80010f0 <HAL_RCC_OscConfig+0xb0>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010bc:	d10c      	bne.n	80010d8 <HAL_RCC_OscConfig+0x98>
 80010be:	4b8b      	ldr	r3, [pc, #556]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a8a      	ldr	r2, [pc, #552]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	4b88      	ldr	r3, [pc, #544]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a87      	ldr	r2, [pc, #540]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80010d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	e00b      	b.n	80010f0 <HAL_RCC_OscConfig+0xb0>
 80010d8:	4b84      	ldr	r3, [pc, #528]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a83      	ldr	r2, [pc, #524]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80010de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b81      	ldr	r3, [pc, #516]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a80      	ldr	r2, [pc, #512]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80010ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d013      	beq.n	8001120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fcee 	bl	8000ad8 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fcea 	bl	8000ad8 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	; 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e204      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001112:	4b76      	ldr	r3, [pc, #472]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0xc0>
 800111e:	e014      	b.n	800114a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fcda 	bl	8000ad8 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fcd6 	bl	8000ad8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	; 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e1f0      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113a:	4b6c      	ldr	r3, [pc, #432]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0xe8>
 8001146:	e000      	b.n	800114a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d063      	beq.n	800121e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001156:	4b65      	ldr	r3, [pc, #404]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 030c 	and.w	r3, r3, #12
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00b      	beq.n	800117a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001162:	4b62      	ldr	r3, [pc, #392]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800116a:	2b08      	cmp	r3, #8
 800116c:	d11c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800116e:	4b5f      	ldr	r3, [pc, #380]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d116      	bne.n	80011a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117a:	4b5c      	ldr	r3, [pc, #368]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d005      	beq.n	8001192 <HAL_RCC_OscConfig+0x152>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d001      	beq.n	8001192 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e1c4      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001192:	4b56      	ldr	r3, [pc, #344]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	4952      	ldr	r1, [pc, #328]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a6:	e03a      	b.n	800121e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d020      	beq.n	80011f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b0:	4b4f      	ldr	r3, [pc, #316]	; (80012f0 <HAL_RCC_OscConfig+0x2b0>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b6:	f7ff fc8f 	bl	8000ad8 <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011be:	f7ff fc8b 	bl	8000ad8 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e1a5      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d0:	4b46      	ldr	r3, [pc, #280]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0f0      	beq.n	80011be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011dc:	4b43      	ldr	r3, [pc, #268]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	4940      	ldr	r1, [pc, #256]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	600b      	str	r3, [r1, #0]
 80011f0:	e015      	b.n	800121e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f2:	4b3f      	ldr	r3, [pc, #252]	; (80012f0 <HAL_RCC_OscConfig+0x2b0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f8:	f7ff fc6e 	bl	8000ad8 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001200:	f7ff fc6a 	bl	8000ad8 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e184      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001212:	4b36      	ldr	r3, [pc, #216]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b00      	cmp	r3, #0
 8001228:	d030      	beq.n	800128c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d016      	beq.n	8001260 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001232:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <HAL_RCC_OscConfig+0x2b4>)
 8001234:	2201      	movs	r2, #1
 8001236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001238:	f7ff fc4e 	bl	8000ad8 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001240:	f7ff fc4a 	bl	8000ad8 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e164      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001252:	4b26      	ldr	r3, [pc, #152]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 8001254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0x200>
 800125e:	e015      	b.n	800128c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <HAL_RCC_OscConfig+0x2b4>)
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001266:	f7ff fc37 	bl	8000ad8 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800126e:	f7ff fc33 	bl	8000ad8 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e14d      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001280:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 8001282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f0      	bne.n	800126e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 80a0 	beq.w	80013da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10f      	bne.n	80012ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012c6:	2301      	movs	r3, #1
 80012c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_RCC_OscConfig+0x2b8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d121      	bne.n	800131a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_RCC_OscConfig+0x2b8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_RCC_OscConfig+0x2b8>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e2:	f7ff fbf9 	bl	8000ad8 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e8:	e011      	b.n	800130e <HAL_RCC_OscConfig+0x2ce>
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	42470000 	.word	0x42470000
 80012f4:	42470e80 	.word	0x42470e80
 80012f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fc:	f7ff fbec 	bl	8000ad8 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e106      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130e:	4b85      	ldr	r3, [pc, #532]	; (8001524 <HAL_RCC_OscConfig+0x4e4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d106      	bne.n	8001330 <HAL_RCC_OscConfig+0x2f0>
 8001322:	4b81      	ldr	r3, [pc, #516]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 8001324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001326:	4a80      	ldr	r2, [pc, #512]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6713      	str	r3, [r2, #112]	; 0x70
 800132e:	e01c      	b.n	800136a <HAL_RCC_OscConfig+0x32a>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2b05      	cmp	r3, #5
 8001336:	d10c      	bne.n	8001352 <HAL_RCC_OscConfig+0x312>
 8001338:	4b7b      	ldr	r3, [pc, #492]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 800133a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133c:	4a7a      	ldr	r2, [pc, #488]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	6713      	str	r3, [r2, #112]	; 0x70
 8001344:	4b78      	ldr	r3, [pc, #480]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 8001346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001348:	4a77      	ldr	r2, [pc, #476]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6713      	str	r3, [r2, #112]	; 0x70
 8001350:	e00b      	b.n	800136a <HAL_RCC_OscConfig+0x32a>
 8001352:	4b75      	ldr	r3, [pc, #468]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001356:	4a74      	ldr	r2, [pc, #464]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 8001358:	f023 0301 	bic.w	r3, r3, #1
 800135c:	6713      	str	r3, [r2, #112]	; 0x70
 800135e:	4b72      	ldr	r3, [pc, #456]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 8001360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001362:	4a71      	ldr	r2, [pc, #452]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 8001364:	f023 0304 	bic.w	r3, r3, #4
 8001368:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d015      	beq.n	800139e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001372:	f7ff fbb1 	bl	8000ad8 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001378:	e00a      	b.n	8001390 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800137a:	f7ff fbad 	bl	8000ad8 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	f241 3288 	movw	r2, #5000	; 0x1388
 8001388:	4293      	cmp	r3, r2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e0c5      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001390:	4b65      	ldr	r3, [pc, #404]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 8001392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0ee      	beq.n	800137a <HAL_RCC_OscConfig+0x33a>
 800139c:	e014      	b.n	80013c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139e:	f7ff fb9b 	bl	8000ad8 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a4:	e00a      	b.n	80013bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a6:	f7ff fb97 	bl	8000ad8 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e0af      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013bc:	4b5a      	ldr	r3, [pc, #360]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 80013be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1ee      	bne.n	80013a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d105      	bne.n	80013da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ce:	4b56      	ldr	r3, [pc, #344]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a55      	ldr	r2, [pc, #340]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 80013d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 809b 	beq.w	800151a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013e4:	4b50      	ldr	r3, [pc, #320]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 030c 	and.w	r3, r3, #12
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d05c      	beq.n	80014aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d141      	bne.n	800147c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f8:	4b4c      	ldr	r3, [pc, #304]	; (800152c <HAL_RCC_OscConfig+0x4ec>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fe:	f7ff fb6b 	bl	8000ad8 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001406:	f7ff fb67 	bl	8000ad8 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e081      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001418:	4b43      	ldr	r3, [pc, #268]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f0      	bne.n	8001406 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69da      	ldr	r2, [r3, #28]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	431a      	orrs	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	019b      	lsls	r3, r3, #6
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143a:	085b      	lsrs	r3, r3, #1
 800143c:	3b01      	subs	r3, #1
 800143e:	041b      	lsls	r3, r3, #16
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	061b      	lsls	r3, r3, #24
 8001448:	4937      	ldr	r1, [pc, #220]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 800144a:	4313      	orrs	r3, r2
 800144c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800144e:	4b37      	ldr	r3, [pc, #220]	; (800152c <HAL_RCC_OscConfig+0x4ec>)
 8001450:	2201      	movs	r2, #1
 8001452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fb40 	bl	8000ad8 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145c:	f7ff fb3c 	bl	8000ad8 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e056      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146e:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x41c>
 800147a:	e04e      	b.n	800151a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147c:	4b2b      	ldr	r3, [pc, #172]	; (800152c <HAL_RCC_OscConfig+0x4ec>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001482:	f7ff fb29 	bl	8000ad8 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800148a:	f7ff fb25 	bl	8000ad8 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e03f      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149c:	4b22      	ldr	r3, [pc, #136]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1f0      	bne.n	800148a <HAL_RCC_OscConfig+0x44a>
 80014a8:	e037      	b.n	800151a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e032      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_RCC_OscConfig+0x4e8>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d028      	beq.n	8001516 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d121      	bne.n	8001516 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014dc:	429a      	cmp	r2, r3
 80014de:	d11a      	bne.n	8001516 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014e6:	4013      	ands	r3, r2
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d111      	bne.n	8001516 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	085b      	lsrs	r3, r3, #1
 80014fe:	3b01      	subs	r3, #1
 8001500:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001502:	429a      	cmp	r2, r3
 8001504:	d107      	bne.n	8001516 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001512:	429a      	cmp	r2, r3
 8001514:	d001      	beq.n	800151a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40007000 	.word	0x40007000
 8001528:	40023800 	.word	0x40023800
 800152c:	42470060 	.word	0x42470060

08001530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0cc      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001544:	4b68      	ldr	r3, [pc, #416]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d90c      	bls.n	800156c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001552:	4b65      	ldr	r3, [pc, #404]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155a:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d001      	beq.n	800156c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0b8      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d020      	beq.n	80015ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001584:	4b59      	ldr	r3, [pc, #356]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	4a58      	ldr	r2, [pc, #352]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800158e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800159c:	4b53      	ldr	r3, [pc, #332]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	4a52      	ldr	r2, [pc, #328]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a8:	4b50      	ldr	r3, [pc, #320]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	494d      	ldr	r1, [pc, #308]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d044      	beq.n	8001650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d107      	bne.n	80015de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ce:	4b47      	ldr	r3, [pc, #284]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d119      	bne.n	800160e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e07f      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d003      	beq.n	80015ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ee:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e06f      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fe:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e067      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800160e:	4b37      	ldr	r3, [pc, #220]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f023 0203 	bic.w	r2, r3, #3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	4934      	ldr	r1, [pc, #208]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	4313      	orrs	r3, r2
 800161e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001620:	f7ff fa5a 	bl	8000ad8 <HAL_GetTick>
 8001624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001626:	e00a      	b.n	800163e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001628:	f7ff fa56 	bl	8000ad8 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e04f      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 020c 	and.w	r2, r3, #12
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	429a      	cmp	r2, r3
 800164e:	d1eb      	bne.n	8001628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001650:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d20c      	bcs.n	8001678 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d001      	beq.n	8001678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e032      	b.n	80016de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4916      	ldr	r1, [pc, #88]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	4313      	orrs	r3, r2
 8001694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d009      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	490e      	ldr	r1, [pc, #56]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016b6:	f000 f821 	bl	80016fc <HAL_RCC_GetSysClockFreq>
 80016ba:	4602      	mov	r2, r0
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	490a      	ldr	r1, [pc, #40]	; (80016f0 <HAL_RCC_ClockConfig+0x1c0>)
 80016c8:	5ccb      	ldrb	r3, [r1, r3]
 80016ca:	fa22 f303 	lsr.w	r3, r2, r3
 80016ce:	4a09      	ldr	r2, [pc, #36]	; (80016f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_RCC_ClockConfig+0x1c8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff f9ba 	bl	8000a50 <HAL_InitTick>

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00
 80016ec:	40023800 	.word	0x40023800
 80016f0:	08002cec 	.word	0x08002cec
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000004 	.word	0x20000004

080016fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016fc:	b5b0      	push	{r4, r5, r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001702:	2100      	movs	r1, #0
 8001704:	6079      	str	r1, [r7, #4]
 8001706:	2100      	movs	r1, #0
 8001708:	60f9      	str	r1, [r7, #12]
 800170a:	2100      	movs	r1, #0
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800170e:	2100      	movs	r1, #0
 8001710:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001712:	4952      	ldr	r1, [pc, #328]	; (800185c <HAL_RCC_GetSysClockFreq+0x160>)
 8001714:	6889      	ldr	r1, [r1, #8]
 8001716:	f001 010c 	and.w	r1, r1, #12
 800171a:	2908      	cmp	r1, #8
 800171c:	d00d      	beq.n	800173a <HAL_RCC_GetSysClockFreq+0x3e>
 800171e:	2908      	cmp	r1, #8
 8001720:	f200 8094 	bhi.w	800184c <HAL_RCC_GetSysClockFreq+0x150>
 8001724:	2900      	cmp	r1, #0
 8001726:	d002      	beq.n	800172e <HAL_RCC_GetSysClockFreq+0x32>
 8001728:	2904      	cmp	r1, #4
 800172a:	d003      	beq.n	8001734 <HAL_RCC_GetSysClockFreq+0x38>
 800172c:	e08e      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800172e:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <HAL_RCC_GetSysClockFreq+0x164>)
 8001730:	60bb      	str	r3, [r7, #8]
       break;
 8001732:	e08e      	b.n	8001852 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001734:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <HAL_RCC_GetSysClockFreq+0x168>)
 8001736:	60bb      	str	r3, [r7, #8]
      break;
 8001738:	e08b      	b.n	8001852 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800173a:	4948      	ldr	r1, [pc, #288]	; (800185c <HAL_RCC_GetSysClockFreq+0x160>)
 800173c:	6849      	ldr	r1, [r1, #4]
 800173e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001742:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001744:	4945      	ldr	r1, [pc, #276]	; (800185c <HAL_RCC_GetSysClockFreq+0x160>)
 8001746:	6849      	ldr	r1, [r1, #4]
 8001748:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800174c:	2900      	cmp	r1, #0
 800174e:	d024      	beq.n	800179a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001750:	4942      	ldr	r1, [pc, #264]	; (800185c <HAL_RCC_GetSysClockFreq+0x160>)
 8001752:	6849      	ldr	r1, [r1, #4]
 8001754:	0989      	lsrs	r1, r1, #6
 8001756:	4608      	mov	r0, r1
 8001758:	f04f 0100 	mov.w	r1, #0
 800175c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001760:	f04f 0500 	mov.w	r5, #0
 8001764:	ea00 0204 	and.w	r2, r0, r4
 8001768:	ea01 0305 	and.w	r3, r1, r5
 800176c:	493d      	ldr	r1, [pc, #244]	; (8001864 <HAL_RCC_GetSysClockFreq+0x168>)
 800176e:	fb01 f003 	mul.w	r0, r1, r3
 8001772:	2100      	movs	r1, #0
 8001774:	fb01 f102 	mul.w	r1, r1, r2
 8001778:	1844      	adds	r4, r0, r1
 800177a:	493a      	ldr	r1, [pc, #232]	; (8001864 <HAL_RCC_GetSysClockFreq+0x168>)
 800177c:	fba2 0101 	umull	r0, r1, r2, r1
 8001780:	1863      	adds	r3, r4, r1
 8001782:	4619      	mov	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	461a      	mov	r2, r3
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	f7fe fd24 	bl	80001d8 <__aeabi_uldivmod>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4613      	mov	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	e04a      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_RCC_GetSysClockFreq+0x160>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	099b      	lsrs	r3, r3, #6
 80017a0:	461a      	mov	r2, r3
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017aa:	f04f 0100 	mov.w	r1, #0
 80017ae:	ea02 0400 	and.w	r4, r2, r0
 80017b2:	ea03 0501 	and.w	r5, r3, r1
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	014b      	lsls	r3, r1, #5
 80017c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017c8:	0142      	lsls	r2, r0, #5
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	1b00      	subs	r0, r0, r4
 80017d0:	eb61 0105 	sbc.w	r1, r1, r5
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	018b      	lsls	r3, r1, #6
 80017de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017e2:	0182      	lsls	r2, r0, #6
 80017e4:	1a12      	subs	r2, r2, r0
 80017e6:	eb63 0301 	sbc.w	r3, r3, r1
 80017ea:	f04f 0000 	mov.w	r0, #0
 80017ee:	f04f 0100 	mov.w	r1, #0
 80017f2:	00d9      	lsls	r1, r3, #3
 80017f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017f8:	00d0      	lsls	r0, r2, #3
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	1912      	adds	r2, r2, r4
 8001800:	eb45 0303 	adc.w	r3, r5, r3
 8001804:	f04f 0000 	mov.w	r0, #0
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	0299      	lsls	r1, r3, #10
 800180e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001812:	0290      	lsls	r0, r2, #10
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	461a      	mov	r2, r3
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	f7fe fcd8 	bl	80001d8 <__aeabi_uldivmod>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4613      	mov	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_RCC_GetSysClockFreq+0x160>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	3301      	adds	r3, #1
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	fbb2 f3f3 	udiv	r3, r2, r3
 8001848:	60bb      	str	r3, [r7, #8]
      break;
 800184a:	e002      	b.n	8001852 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <HAL_RCC_GetSysClockFreq+0x164>)
 800184e:	60bb      	str	r3, [r7, #8]
      break;
 8001850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001852:	68bb      	ldr	r3, [r7, #8]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bdb0      	pop	{r4, r5, r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	00f42400 	.word	0x00f42400
 8001864:	017d7840 	.word	0x017d7840

08001868 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e07b      	b.n	8001972 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	2b00      	cmp	r3, #0
 8001880:	d108      	bne.n	8001894 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800188a:	d009      	beq.n	80018a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
 8001892:	e005      	b.n	80018a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d106      	bne.n	80018c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7fe fff8 	bl	80008b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001924:	ea42 0103 	orr.w	r1, r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	f003 0104 	and.w	r1, r3, #4
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	f003 0210 	and.w	r2, r3, #16
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	69da      	ldr	r2, [r3, #28]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001960:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b088      	sub	sp, #32
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	4613      	mov	r3, r2
 8001988:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_SPI_Transmit+0x22>
 8001998:	2302      	movs	r3, #2
 800199a:	e126      	b.n	8001bea <HAL_SPI_Transmit+0x270>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019a4:	f7ff f898 	bl	8000ad8 <HAL_GetTick>
 80019a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d002      	beq.n	80019c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80019ba:	2302      	movs	r3, #2
 80019bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80019be:	e10b      	b.n	8001bd8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <HAL_SPI_Transmit+0x52>
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80019d0:	e102      	b.n	8001bd8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2203      	movs	r2, #3
 80019d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	88fa      	ldrh	r2, [r7, #6]
 80019ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	88fa      	ldrh	r2, [r7, #6]
 80019f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a18:	d10f      	bne.n	8001a3a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a44:	2b40      	cmp	r3, #64	; 0x40
 8001a46:	d007      	beq.n	8001a58 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a60:	d14b      	bne.n	8001afa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <HAL_SPI_Transmit+0xf6>
 8001a6a:	8afb      	ldrh	r3, [r7, #22]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d13e      	bne.n	8001aee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	881a      	ldrh	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	1c9a      	adds	r2, r3, #2
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a94:	e02b      	b.n	8001aee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d112      	bne.n	8001aca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	881a      	ldrh	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	1c9a      	adds	r2, r3, #2
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ac8:	e011      	b.n	8001aee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001aca:	f7ff f805 	bl	8000ad8 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d803      	bhi.n	8001ae2 <HAL_SPI_Transmit+0x168>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d102      	bne.n	8001ae8 <HAL_SPI_Transmit+0x16e>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001aec:	e074      	b.n	8001bd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1ce      	bne.n	8001a96 <HAL_SPI_Transmit+0x11c>
 8001af8:	e04c      	b.n	8001b94 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <HAL_SPI_Transmit+0x18e>
 8001b02:	8afb      	ldrh	r3, [r7, #22]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d140      	bne.n	8001b8a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	330c      	adds	r3, #12
 8001b12:	7812      	ldrb	r2, [r2, #0]
 8001b14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001b2e:	e02c      	b.n	8001b8a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d113      	bne.n	8001b66 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	330c      	adds	r3, #12
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b64:	e011      	b.n	8001b8a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b66:	f7fe ffb7 	bl	8000ad8 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d803      	bhi.n	8001b7e <HAL_SPI_Transmit+0x204>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	d102      	bne.n	8001b84 <HAL_SPI_Transmit+0x20a>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b88:	e026      	b.n	8001bd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1cd      	bne.n	8001b30 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	6839      	ldr	r1, [r7, #0]
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 fbcb 	bl	8002334 <SPI_EndRxTxTransaction>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10a      	bne.n	8001bc8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	77fb      	strb	r3, [r7, #31]
 8001bd4:	e000      	b.n	8001bd8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001bd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001be8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3720      	adds	r7, #32
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b088      	sub	sp, #32
 8001bf6:	af02      	add	r7, sp, #8
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c0e:	d112      	bne.n	8001c36 <HAL_SPI_Receive+0x44>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10e      	bne.n	8001c36 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001c20:	88fa      	ldrh	r2, [r7, #6]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	4613      	mov	r3, r2
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	68b9      	ldr	r1, [r7, #8]
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 f8f1 	bl	8001e14 <HAL_SPI_TransmitReceive>
 8001c32:	4603      	mov	r3, r0
 8001c34:	e0ea      	b.n	8001e0c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_SPI_Receive+0x52>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e0e3      	b.n	8001e0c <HAL_SPI_Receive+0x21a>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c4c:	f7fe ff44 	bl	8000ad8 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d002      	beq.n	8001c64 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c62:	e0ca      	b.n	8001dfa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <HAL_SPI_Receive+0x7e>
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c74:	e0c1      	b.n	8001dfa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2204      	movs	r2, #4
 8001c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	88fa      	ldrh	r2, [r7, #6]
 8001c8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	88fa      	ldrh	r2, [r7, #6]
 8001c94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cbc:	d10f      	bne.n	8001cde <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ccc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce8:	2b40      	cmp	r3, #64	; 0x40
 8001cea:	d007      	beq.n	8001cfc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cfa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d162      	bne.n	8001dca <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001d04:	e02e      	b.n	8001d64 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d115      	bne.n	8001d40 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f103 020c 	add.w	r2, r3, #12
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d20:	7812      	ldrb	r2, [r2, #0]
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d3e:	e011      	b.n	8001d64 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d40:	f7fe feca 	bl	8000ad8 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d803      	bhi.n	8001d58 <HAL_SPI_Receive+0x166>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d56:	d102      	bne.n	8001d5e <HAL_SPI_Receive+0x16c>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d102      	bne.n	8001d64 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001d62:	e04a      	b.n	8001dfa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1cb      	bne.n	8001d06 <HAL_SPI_Receive+0x114>
 8001d6e:	e031      	b.n	8001dd4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d113      	bne.n	8001da6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d88:	b292      	uxth	r2, r2
 8001d8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d90:	1c9a      	adds	r2, r3, #2
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001da4:	e011      	b.n	8001dca <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001da6:	f7fe fe97 	bl	8000ad8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d803      	bhi.n	8001dbe <HAL_SPI_Receive+0x1cc>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d102      	bne.n	8001dc4 <HAL_SPI_Receive+0x1d2>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d102      	bne.n	8001dca <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001dc8:	e017      	b.n	8001dfa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1cd      	bne.n	8001d70 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 fa45 	bl	8002268 <SPI_EndRxTransaction>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2220      	movs	r2, #32
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	75fb      	strb	r3, [r7, #23]
 8001df6:	e000      	b.n	8001dfa <HAL_SPI_Receive+0x208>
  }

error :
 8001df8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	; 0x30
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e22:	2301      	movs	r3, #1
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_SPI_TransmitReceive+0x26>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e18a      	b.n	8002150 <HAL_SPI_TransmitReceive+0x33c>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e42:	f7fe fe49 	bl	8000ad8 <HAL_GetTick>
 8001e46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001e58:	887b      	ldrh	r3, [r7, #2]
 8001e5a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d00f      	beq.n	8001e84 <HAL_SPI_TransmitReceive+0x70>
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e6a:	d107      	bne.n	8001e7c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d103      	bne.n	8001e7c <HAL_SPI_TransmitReceive+0x68>
 8001e74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d003      	beq.n	8001e84 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e82:	e15b      	b.n	800213c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_SPI_TransmitReceive+0x82>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <HAL_SPI_TransmitReceive+0x82>
 8001e90:	887b      	ldrh	r3, [r7, #2]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d103      	bne.n	8001e9e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e9c:	e14e      	b.n	800213c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d003      	beq.n	8001eb2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2205      	movs	r2, #5
 8001eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	887a      	ldrh	r2, [r7, #2]
 8001ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	887a      	ldrh	r2, [r7, #2]
 8001ed4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	887a      	ldrh	r2, [r7, #2]
 8001eda:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef2:	2b40      	cmp	r3, #64	; 0x40
 8001ef4:	d007      	beq.n	8001f06 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f0e:	d178      	bne.n	8002002 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <HAL_SPI_TransmitReceive+0x10a>
 8001f18:	8b7b      	ldrh	r3, [r7, #26]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d166      	bne.n	8001fec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	881a      	ldrh	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	1c9a      	adds	r2, r3, #2
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f42:	e053      	b.n	8001fec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d11b      	bne.n	8001f8a <HAL_SPI_TransmitReceive+0x176>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d016      	beq.n	8001f8a <HAL_SPI_TransmitReceive+0x176>
 8001f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d113      	bne.n	8001f8a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	881a      	ldrh	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	1c9a      	adds	r2, r3, #2
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d119      	bne.n	8001fcc <HAL_SPI_TransmitReceive+0x1b8>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d014      	beq.n	8001fcc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fac:	b292      	uxth	r2, r2
 8001fae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb4:	1c9a      	adds	r2, r3, #2
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001fcc:	f7fe fd84 	bl	8000ad8 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d807      	bhi.n	8001fec <HAL_SPI_TransmitReceive+0x1d8>
 8001fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe2:	d003      	beq.n	8001fec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001fea:	e0a7      	b.n	800213c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1a6      	bne.n	8001f44 <HAL_SPI_TransmitReceive+0x130>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1a1      	bne.n	8001f44 <HAL_SPI_TransmitReceive+0x130>
 8002000:	e07c      	b.n	80020fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <HAL_SPI_TransmitReceive+0x1fc>
 800200a:	8b7b      	ldrh	r3, [r7, #26]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d16b      	bne.n	80020e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	330c      	adds	r3, #12
 800201a:	7812      	ldrb	r2, [r2, #0]
 800201c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002036:	e057      	b.n	80020e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d11c      	bne.n	8002080 <HAL_SPI_TransmitReceive+0x26c>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800204a:	b29b      	uxth	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d017      	beq.n	8002080 <HAL_SPI_TransmitReceive+0x26c>
 8002050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002052:	2b01      	cmp	r3, #1
 8002054:	d114      	bne.n	8002080 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	330c      	adds	r3, #12
 8002060:	7812      	ldrb	r2, [r2, #0]
 8002062:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d119      	bne.n	80020c2 <HAL_SPI_TransmitReceive+0x2ae>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002092:	b29b      	uxth	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d014      	beq.n	80020c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020be:	2301      	movs	r3, #1
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80020c2:	f7fe fd09 	bl	8000ad8 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d803      	bhi.n	80020da <HAL_SPI_TransmitReceive+0x2c6>
 80020d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d8:	d102      	bne.n	80020e0 <HAL_SPI_TransmitReceive+0x2cc>
 80020da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d103      	bne.n	80020e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80020e6:	e029      	b.n	800213c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1a2      	bne.n	8002038 <HAL_SPI_TransmitReceive+0x224>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d19d      	bne.n	8002038 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f917 	bl	8002334 <SPI_EndRxTxTransaction>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d006      	beq.n	800211a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2220      	movs	r2, #32
 8002116:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002118:	e010      	b.n	800213c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10b      	bne.n	800213a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	e000      	b.n	800213c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800213a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800214c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002150:	4618      	mov	r0, r3
 8002152:	3730      	adds	r7, #48	; 0x30
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	4613      	mov	r3, r2
 8002166:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002168:	f7fe fcb6 	bl	8000ad8 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	4413      	add	r3, r2
 8002176:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002178:	f7fe fcae 	bl	8000ad8 <HAL_GetTick>
 800217c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800217e:	4b39      	ldr	r3, [pc, #228]	; (8002264 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	015b      	lsls	r3, r3, #5
 8002184:	0d1b      	lsrs	r3, r3, #20
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	fb02 f303 	mul.w	r3, r2, r3
 800218c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800218e:	e054      	b.n	800223a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002196:	d050      	beq.n	800223a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002198:	f7fe fc9e 	bl	8000ad8 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d902      	bls.n	80021ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d13d      	bne.n	800222a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021c6:	d111      	bne.n	80021ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021d0:	d004      	beq.n	80021dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021da:	d107      	bne.n	80021ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f4:	d10f      	bne.n	8002216 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002214:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e017      	b.n	800225a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3b01      	subs	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4013      	ands	r3, r2
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	429a      	cmp	r2, r3
 8002248:	bf0c      	ite	eq
 800224a:	2301      	moveq	r3, #1
 800224c:	2300      	movne	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	429a      	cmp	r2, r3
 8002256:	d19b      	bne.n	8002190 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3720      	adds	r7, #32
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000000 	.word	0x20000000

08002268 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800227c:	d111      	bne.n	80022a2 <SPI_EndRxTransaction+0x3a>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002286:	d004      	beq.n	8002292 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002290:	d107      	bne.n	80022a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022aa:	d12a      	bne.n	8002302 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b4:	d012      	beq.n	80022dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2200      	movs	r2, #0
 80022be:	2180      	movs	r1, #128	; 0x80
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff ff49 	bl	8002158 <SPI_WaitFlagStateUntilTimeout>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d02d      	beq.n	8002328 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d0:	f043 0220 	orr.w	r2, r3, #32
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e026      	b.n	800232a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2200      	movs	r2, #0
 80022e4:	2101      	movs	r1, #1
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f7ff ff36 	bl	8002158 <SPI_WaitFlagStateUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01a      	beq.n	8002328 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	f043 0220 	orr.w	r2, r3, #32
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e013      	b.n	800232a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2200      	movs	r2, #0
 800230a:	2101      	movs	r1, #1
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7ff ff23 	bl	8002158 <SPI_WaitFlagStateUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d007      	beq.n	8002328 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	f043 0220 	orr.w	r2, r3, #32
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e000      	b.n	800232a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <SPI_EndRxTxTransaction+0x7c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a1b      	ldr	r2, [pc, #108]	; (80023b4 <SPI_EndRxTxTransaction+0x80>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	0d5b      	lsrs	r3, r3, #21
 800234c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002350:	fb02 f303 	mul.w	r3, r2, r3
 8002354:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800235e:	d112      	bne.n	8002386 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2200      	movs	r2, #0
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f7ff fef4 	bl	8002158 <SPI_WaitFlagStateUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d016      	beq.n	80023a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237a:	f043 0220 	orr.w	r2, r3, #32
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e00f      	b.n	80023a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3b01      	subs	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239c:	2b80      	cmp	r3, #128	; 0x80
 800239e:	d0f2      	beq.n	8002386 <SPI_EndRxTxTransaction+0x52>
 80023a0:	e000      	b.n	80023a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80023a2:	bf00      	nop
  }

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000000 	.word	0x20000000
 80023b4:	165e9f81 	.word	0x165e9f81

080023b8 <_nrf24_CS>:
extern SPI_HandleTypeDef hspi2;



static void _nrf24_CS(void * intf_ptr, bool mode)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	60fb      	str	r3, [r7, #12]
	nrf24_spi_pins_t *api_config_low = (nrf24_spi_pins_t *)api_config->intf_ptr;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	60bb      	str	r3, [r7, #8]
	if (mode)
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <_nrf24_CS+0x2e>
	{
		// Опускаем chip select для того, что бы начать общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_RESET);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	6898      	ldr	r0, [r3, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	899b      	ldrh	r3, [r3, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	4619      	mov	r1, r3
 80023e0:	f7fe fe14 	bl	800100c <HAL_GPIO_WritePin>
	{
		// Поднимаем chip select для того, что бы закончить общение с конкретным устройством.
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
		//HAL_Delay(100);
	}
}
 80023e4:	e007      	b.n	80023f6 <_nrf24_CS+0x3e>
		HAL_GPIO_WritePin(api_config_low->cs_port, api_config_low->cs_pin,  GPIO_PIN_SET);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	6898      	ldr	r0, [r3, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	899b      	ldrh	r3, [r3, #12]
 80023ee:	2201      	movs	r2, #1
 80023f0:	4619      	mov	r1, r3
 80023f2:	f7fe fe0b 	bl	800100c <HAL_GPIO_WritePin>
}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <nrf24_read_register>:
		shift_reg_oe(api_config_low->this, false);
	}
}

void nrf24_read_register(void * intf_ptr, uint8_t reg_addr, uint8_t * reg_data, size_t data_size)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	603b      	str	r3, [r7, #0]
 800240a:	460b      	mov	r3, r1
 800240c:	72fb      	strb	r3, [r7, #11]

	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	617b      	str	r3, [r7, #20]

	api_config->nrf24_CS(intf_ptr, true);
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2101      	movs	r1, #1
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для чтения из этого регистра
	reg_addr = reg_addr & ~((1 << 5) | (1 << 6) | (1 << 7));
 800241c:	7afb      	ldrb	r3, [r7, #11]
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	b2db      	uxtb	r3, r3
 8002424:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, который читаем и читаем данные
	HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	f107 010b 	add.w	r1, r7, #11
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	2201      	movs	r2, #1
 8002434:	f7ff faa1 	bl	800197a <HAL_SPI_Transmit>
	HAL_SPI_Receive(api_config->hspi, reg_data, data_size, HAL_MAX_DELAY);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	b29a      	uxth	r2, r3
 8002440:	f04f 33ff 	mov.w	r3, #4294967295
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	f7ff fbd4 	bl	8001bf2 <HAL_SPI_Receive>

	api_config->nrf24_CS(intf_ptr, false);
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2100      	movs	r1, #0
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	4798      	blx	r3
}
 8002454:	bf00      	nop
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <nrf24_write_register>:

void nrf24_write_register(void * intf_ptr, uint8_t reg_addr, const uint8_t * reg_data, size_t data_size)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	460b      	mov	r3, r1
 800246a:	72fb      	strb	r3, [r7, #11]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	617b      	str	r3, [r7, #20]
	api_config->nrf24_CS(intf_ptr, true);
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2101      	movs	r1, #1
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	4798      	blx	r3

	// Добавляем в 5 битов адреса еще 3 бита для записи в регистр
	reg_addr = (reg_addr & ~((1 << 6) | (1 << 7))) | (1 << 5);
 800247a:	7afb      	ldrb	r3, [r7, #11]
 800247c:	b25b      	sxtb	r3, r3
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	b25b      	sxtb	r3, r3
 8002484:	f043 0320 	orr.w	r3, r3, #32
 8002488:	b25b      	sxtb	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	72fb      	strb	r3, [r7, #11]

	// Передаем адресс регистра, в который пишем и пишем в регистр
	HAL_SPI_Transmit(api_config->hspi, &reg_addr, 1, HAL_MAX_DELAY);
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	f107 010b 	add.w	r1, r7, #11
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
 800249a:	2201      	movs	r2, #1
 800249c:	f7ff fa6d 	bl	800197a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(api_config->hspi, (uint8_t*)reg_data, data_size, HAL_MAX_DELAY);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	f7ff fa64 	bl	800197a <HAL_SPI_Transmit>

	api_config->nrf24_CS(intf_ptr, false);
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2100      	movs	r1, #0
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	4798      	blx	r3
}
 80024bc:	bf00      	nop
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <nrf24_read_rx_payload>:

void nrf24_read_rx_payload(void * intf_ptr, uint8_t * payload_buffer, size_t payload_buffer_size)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	617b      	str	r3, [r7, #20]
	uint8_t command = NRF24_R_RX_PAYLOAD;
 80024d4:	2361      	movs	r3, #97	; 0x61
 80024d6:	74fb      	strb	r3, [r7, #19]
	uint8_t payload_size = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	74bb      	strb	r3, [r7, #18]
    // Считываем размер данных
	nrf24_get_rx_payload_size(intf_ptr, &payload_size);
 80024dc:	f107 0312 	add.w	r3, r7, #18
 80024e0:	4619      	mov	r1, r3
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f86c 	bl	80025c0 <nrf24_get_rx_payload_size>
	// Если размер данных от 1 до 32, то читаем данные
	if (payload_size > 0 || payload_size < 32)
 80024e8:	7cbb      	ldrb	r3, [r7, #18]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <nrf24_read_rx_payload+0x30>
 80024ee:	7cbb      	ldrb	r3, [r7, #18]
 80024f0:	2b1f      	cmp	r3, #31
 80024f2:	d823      	bhi.n	800253c <nrf24_read_rx_payload+0x78>
	{
		// Если места на запись меньше, чем у нас есть данных, читем сколько, сколько есть места
		if (payload_size > payload_buffer_size)
 80024f4:	7cbb      	ldrb	r3, [r7, #18]
 80024f6:	461a      	mov	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d202      	bcs.n	8002504 <nrf24_read_rx_payload+0x40>
		{
			payload_size = payload_buffer_size;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	74bb      	strb	r3, [r7, #18]
		}
		api_config->nrf24_CS(intf_ptr, true);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2101      	movs	r1, #1
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	4798      	blx	r3
		// Читаем данные
		HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	f107 0113 	add.w	r1, r7, #19
 8002516:	f04f 33ff 	mov.w	r3, #4294967295
 800251a:	2201      	movs	r2, #1
 800251c:	f7ff fa2d 	bl	800197a <HAL_SPI_Transmit>
		HAL_SPI_Receive(api_config->hspi, payload_buffer, payload_size, HAL_MAX_DELAY);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	7cbb      	ldrb	r3, [r7, #18]
 8002526:	b29a      	uxth	r2, r3
 8002528:	f04f 33ff 	mov.w	r3, #4294967295
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	f7ff fb60 	bl	8001bf2 <HAL_SPI_Receive>
		api_config->nrf24_CS(intf_ptr, false);
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2100      	movs	r1, #0
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	4798      	blx	r3
	}
}
 800253c:	bf00      	nop
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <nrf24_flush_rx>:

	api_config->nrf24_CS(intf_ptr, false);
}

void nrf24_flush_rx(void * intf_ptr)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_FLUSH_RX;
 8002550:	23e2      	movs	r3, #226	; 0xe2
 8002552:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2101      	movs	r1, #1
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4798      	blx	r3
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	f107 010b 	add.w	r1, r7, #11
 8002566:	f04f 33ff 	mov.w	r3, #4294967295
 800256a:	2201      	movs	r2, #1
 800256c:	f7ff fa05 	bl	800197a <HAL_SPI_Transmit>
	api_config->nrf24_CS(intf_ptr, false);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2100      	movs	r1, #0
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	4798      	blx	r3
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <nrf24_flush_tx>:

void nrf24_flush_tx(void * intf_ptr)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_FLUSH_TX;
 800258e:	23e1      	movs	r3, #225	; 0xe1
 8002590:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2101      	movs	r1, #1
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	f107 010b 	add.w	r1, r7, #11
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295
 80025a8:	2201      	movs	r2, #1
 80025aa:	f7ff f9e6 	bl	800197a <HAL_SPI_Transmit>
	api_config->nrf24_CS(intf_ptr, false);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2100      	movs	r1, #0
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4798      	blx	r3
}
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <nrf24_get_rx_payload_size>:
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
	api_config->nrf24_CS(intf_ptr, false);
}

void nrf24_get_rx_payload_size(void * intf_ptr, uint8_t * payload_size)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_R_RX_PL_WID;
 80025ce:	2360      	movs	r3, #96	; 0x60
 80025d0:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2101      	movs	r1, #1
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
	HAL_SPI_Transmit(api_config->hspi, &command, 1, HAL_MAX_DELAY);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	f107 010b 	add.w	r1, r7, #11
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
 80025e8:	2201      	movs	r2, #1
 80025ea:	f7ff f9c6 	bl	800197a <HAL_SPI_Transmit>
	HAL_SPI_Receive(api_config->hspi, payload_size, 1, HAL_MAX_DELAY);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	2201      	movs	r2, #1
 80025f8:	6839      	ldr	r1, [r7, #0]
 80025fa:	f7ff fafa 	bl	8001bf2 <HAL_SPI_Receive>
	api_config->nrf24_CS(intf_ptr, false);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2100      	movs	r1, #0
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	4798      	blx	r3
	// Если размер данных больше 32, то отчищаем rx буфер и зануляем его
    if (*payload_size > 32)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b20      	cmp	r3, #32
 800260e:	d904      	bls.n	800261a <nrf24_get_rx_payload_size+0x5a>
    {
    	nrf24_flush_rx(intf_ptr);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ff97 	bl	8002544 <nrf24_flush_rx>
    	payload_size = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	603b      	str	r3, [r7, #0]
    }
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <nrf24_get_status>:

	api_config->nrf24_CS(intf_ptr, false);
}

void nrf24_get_status(void * intf_ptr, uint8_t * status)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af02      	add	r7, sp, #8
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	60fb      	str	r3, [r7, #12]
	uint8_t command = NRF24_NOP;
 8002630:	23ff      	movs	r3, #255	; 0xff
 8002632:	72fb      	strb	r3, [r7, #11]
	api_config->nrf24_CS(intf_ptr, true);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2101      	movs	r1, #1
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	4798      	blx	r3
	HAL_SPI_TransmitReceive(api_config->hspi, &command, status, 1, HAL_MAX_DELAY);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	f107 010b 	add.w	r1, r7, #11
 8002646:	f04f 33ff 	mov.w	r3, #4294967295
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	2301      	movs	r3, #1
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	f7ff fbe0 	bl	8001e14 <HAL_SPI_TransmitReceive>
	api_config->nrf24_CS(intf_ptr, false);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2100      	movs	r1, #0
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
}
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <nrf24_ce_activate>:

void nrf24_ce_activate(void * intf_ptr, bool onoff)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	460b      	mov	r3, r1
 8002670:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	60fb      	str	r3, [r7, #12]
	api_config->nrf24_CE(intf_ptr, onoff);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	78fa      	ldrb	r2, [r7, #3]
 800267c:	4611      	mov	r1, r2
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4798      	blx	r3
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <_nrf24_CE>:

void _nrf24_CE(void * intf_ptr, bool onoff)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	70fb      	strb	r3, [r7, #3]
	nrf24_lower_api_config_t *api_config = (nrf24_lower_api_config_t *)intf_ptr;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	60fb      	str	r3, [r7, #12]
	nrf24_spi_pins_t *api_config_low = (nrf24_spi_pins_t *)api_config->intf_ptr;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	60bb      	str	r3, [r7, #8]
	if (onoff)
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d008      	beq.n	80026b8 <_nrf24_CE+0x2e>
	{
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin,  GPIO_PIN_SET);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	889b      	ldrh	r3, [r3, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	4619      	mov	r1, r3
 80026b2:	f7fe fcab 	bl	800100c <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin, GPIO_PIN_RESET);
	}
}
 80026b6:	e007      	b.n	80026c8 <_nrf24_CE+0x3e>
		HAL_GPIO_WritePin(api_config_low->ce_port, api_config_low->ce_pin, GPIO_PIN_RESET);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	889b      	ldrh	r3, [r3, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7fe fca2 	bl	800100c <HAL_GPIO_WritePin>
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <nrf24_spi_init>:
	shift_reg_write_bit_8(api_config_low->this, api_config_low->pos_CE, onoff);
	shift_reg_oe(api_config_low->this, false);
}

void nrf24_spi_init(nrf24_lower_api_config_t* nrf24, SPI_HandleTypeDef *hspi, nrf24_spi_pins_t* pins)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
	nrf24->hspi = hspi;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	601a      	str	r2, [r3, #0]
	nrf24->nrf24_CS = _nrf24_CS;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4a06      	ldr	r2, [pc, #24]	; (8002700 <nrf24_spi_init+0x30>)
 80026e6:	605a      	str	r2, [r3, #4]
	nrf24->nrf24_CE = _nrf24_CE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4a06      	ldr	r2, [pc, #24]	; (8002704 <nrf24_spi_init+0x34>)
 80026ec:	609a      	str	r2, [r3, #8]
	nrf24->intf_ptr = pins;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	60da      	str	r2, [r3, #12]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	080023b9 	.word	0x080023b9
 8002704:	0800268b 	.word	0x0800268b

08002708 <nrf24_setup_rf>:
#include "../nrf24_lower_api.h"
#include "../nrf24_defs.h"


int nrf24_setup_rf(void * intf_ptr, const nrf24_rf_config_t * config)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
	uint8_t rf_setup = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_RF_SETUP, &rf_setup, 1);
 8002716:	f107 020f 	add.w	r2, r7, #15
 800271a:	2301      	movs	r3, #1
 800271c:	2106      	movs	r1, #6
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff fe6d 	bl	80023fe <nrf24_read_register>
	switch (config->data_rate)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d01c      	beq.n	8002766 <nrf24_setup_rf+0x5e>
 800272c:	2b02      	cmp	r3, #2
 800272e:	dc25      	bgt.n	800277c <nrf24_setup_rf+0x74>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <nrf24_setup_rf+0x32>
 8002734:	2b01      	cmp	r3, #1
 8002736:	d00b      	beq.n	8002750 <nrf24_setup_rf+0x48>
 8002738:	e020      	b.n	800277c <nrf24_setup_rf+0x74>
	{
	case NRF24_DATARATE_250_KBIT:
		rf_setup |= NRF24_RFSETUP_RF_DR_LOW; // ставим 1
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	f043 0320 	orr.w	r3, r3, #32
 8002740:	b2db      	uxtb	r3, r3
 8002742:	73fb      	strb	r3, [r7, #15]
		rf_setup &= ~NRF24_RFSETUP_RF_DR_HIGH; // ставим 0
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	f023 0308 	bic.w	r3, r3, #8
 800274a:	b2db      	uxtb	r3, r3
 800274c:	73fb      	strb	r3, [r7, #15]
		break;
 800274e:	e015      	b.n	800277c <nrf24_setup_rf+0x74>
	case NRF24_DATARATE_1000_KBIT :
		rf_setup &= ~NRF24_RFSETUP_RF_DR_LOW;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	f023 0320 	bic.w	r3, r3, #32
 8002756:	b2db      	uxtb	r3, r3
 8002758:	73fb      	strb	r3, [r7, #15]
		rf_setup &= ~NRF24_RFSETUP_RF_DR_HIGH;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	f023 0308 	bic.w	r3, r3, #8
 8002760:	b2db      	uxtb	r3, r3
 8002762:	73fb      	strb	r3, [r7, #15]
		break;
 8002764:	e00a      	b.n	800277c <nrf24_setup_rf+0x74>
	case NRF24_DATARATE_2000_KBIT :
		rf_setup &= ~NRF24_RFSETUP_RF_DR_LOW;
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	f023 0320 	bic.w	r3, r3, #32
 800276c:	b2db      	uxtb	r3, r3
 800276e:	73fb      	strb	r3, [r7, #15]
		rf_setup |= NRF24_RFSETUP_RF_DR_HIGH;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	f043 0308 	orr.w	r3, r3, #8
 8002776:	b2db      	uxtb	r3, r3
 8002778:	73fb      	strb	r3, [r7, #15]
		break;
 800277a:	bf00      	nop
	}

	rf_setup &= ~(NRF24_RFSETUP_RF_PWR_MASK << NRF24_RFSETUP_RF_PWR_OFFSET); // занулили
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	f023 0306 	bic.w	r3, r3, #6
 8002782:	b2db      	uxtb	r3, r3
 8002784:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (config->tx_power & NRF24_RFSETUP_RF_PWR_MASK) << NRF24_RFSETUP_RF_PWR_OFFSET; // записали
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	785b      	ldrb	r3, [r3, #1]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	b25b      	sxtb	r3, r3
 800278e:	f003 0306 	and.w	r3, r3, #6
 8002792:	b25a      	sxtb	r2, r3
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	b25b      	sxtb	r3, r3
 8002798:	4313      	orrs	r3, r2
 800279a:	b25b      	sxtb	r3, r3
 800279c:	b2db      	uxtb	r3, r3
 800279e:	73fb      	strb	r3, [r7, #15]

	nrf24_write_register(intf_ptr, NRF24_REGADDR_RF_SETUP, &rf_setup, 1);
 80027a0:	f107 020f 	add.w	r2, r7, #15
 80027a4:	2301      	movs	r3, #1
 80027a6:	2106      	movs	r1, #6
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff fe57 	bl	800245c <nrf24_write_register>

	uint8_t rf_channel = config->rf_channel;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	789b      	ldrb	r3, [r3, #2]
 80027b2:	73bb      	strb	r3, [r7, #14]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_RF_CH, &rf_channel, 1);
 80027b4:	f107 020e 	add.w	r2, r7, #14
 80027b8:	2301      	movs	r3, #1
 80027ba:	2105      	movs	r1, #5
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff fe4d 	bl	800245c <nrf24_write_register>
	return 0;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <nrf24_setup_protocol>:


int nrf24_setup_protocol(void * intf_ptr, const nrf24_protocol_config_t * config)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
    uint8_t conf_reg = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]
    nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &conf_reg, 1);
 80027da:	f107 020f 	add.w	r2, r7, #15
 80027de:	2301      	movs	r3, #1
 80027e0:	2100      	movs	r1, #0
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff fe0b 	bl	80023fe <nrf24_read_register>
    switch (config->crc_size)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d017      	beq.n	8002820 <nrf24_setup_protocol+0x54>
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	dc20      	bgt.n	8002836 <nrf24_setup_protocol+0x6a>
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <nrf24_setup_protocol+0x32>
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d006      	beq.n	800280a <nrf24_setup_protocol+0x3e>
 80027fc:	e01b      	b.n	8002836 <nrf24_setup_protocol+0x6a>
    {
    case NRF24_CRCSIZE_DISABLE:
    	conf_reg &= ~NRF24_CONFIG_EN_CRC;
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	f023 0308 	bic.w	r3, r3, #8
 8002804:	b2db      	uxtb	r3, r3
 8002806:	73fb      	strb	r3, [r7, #15]
    	break;
 8002808:	e015      	b.n	8002836 <nrf24_setup_protocol+0x6a>
    case NRF24_CRCSIZE_1BYTE :
    	conf_reg |= NRF24_CONFIG_EN_CRC;
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	f043 0308 	orr.w	r3, r3, #8
 8002810:	b2db      	uxtb	r3, r3
 8002812:	73fb      	strb	r3, [r7, #15]
    	conf_reg &= ~NRF24_CONFIG_CRCO;
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	f023 0304 	bic.w	r3, r3, #4
 800281a:	b2db      	uxtb	r3, r3
 800281c:	73fb      	strb	r3, [r7, #15]
    	break;
 800281e:	e00a      	b.n	8002836 <nrf24_setup_protocol+0x6a>
    case NRF24_CRCSIZE_2BYTE :
    	conf_reg |= NRF24_CONFIG_EN_CRC;
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	f043 0308 	orr.w	r3, r3, #8
 8002826:	b2db      	uxtb	r3, r3
 8002828:	73fb      	strb	r3, [r7, #15]
    	conf_reg |= NRF24_CONFIG_CRCO;
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	f043 0304 	orr.w	r3, r3, #4
 8002830:	b2db      	uxtb	r3, r3
 8002832:	73fb      	strb	r3, [r7, #15]
    	break;
 8002834:	bf00      	nop
    }
    nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &conf_reg, 1);
 8002836:	f107 020f 	add.w	r2, r7, #15
 800283a:	2301      	movs	r3, #1
 800283c:	2100      	movs	r1, #0
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff fe0c 	bl	800245c <nrf24_write_register>

    uint8_t setup_aw = config->address_width;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	785b      	ldrb	r3, [r3, #1]
 8002848:	73bb      	strb	r3, [r7, #14]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_SETUP_AW, &setup_aw, 1);
 800284a:	f107 020e 	add.w	r2, r7, #14
 800284e:	2301      	movs	r3, #1
 8002850:	2103      	movs	r1, #3
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff fe02 	bl	800245c <nrf24_write_register>

    uint8_t features = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	737b      	strb	r3, [r7, #13]
    if (config->en_ack_payload)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	78db      	ldrb	r3, [r3, #3]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d004      	beq.n	800286e <nrf24_setup_protocol+0xa2>
    {
    	features |= NRF24_FEATURE_EN_ACK_PAY;
 8002864:	7b7b      	ldrb	r3, [r7, #13]
 8002866:	f043 0302 	orr.w	r3, r3, #2
 800286a:	b2db      	uxtb	r3, r3
 800286c:	737b      	strb	r3, [r7, #13]
    }
    if (config->en_dyn_ack)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	791b      	ldrb	r3, [r3, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <nrf24_setup_protocol+0xb4>
    {
    	features |= NRF24_FEATURE_EN_DYN_ACK;
 8002876:	7b7b      	ldrb	r3, [r7, #13]
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	b2db      	uxtb	r3, r3
 800287e:	737b      	strb	r3, [r7, #13]
    }
    if (config->en_dyn_payload_size)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	789b      	ldrb	r3, [r3, #2]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <nrf24_setup_protocol+0xc6>
    {
    	features |= NRF24_FEATURE_EN_DPL;
 8002888:	7b7b      	ldrb	r3, [r7, #13]
 800288a:	f043 0304 	orr.w	r3, r3, #4
 800288e:	b2db      	uxtb	r3, r3
 8002890:	737b      	strb	r3, [r7, #13]
    }
    nrf24_write_register(intf_ptr, NRF24_REGADDR_FEATURE, &features, 1);
 8002892:	f107 020d 	add.w	r2, r7, #13
 8002896:	2301      	movs	r3, #1
 8002898:	211d      	movs	r1, #29
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff fdde 	bl	800245c <nrf24_write_register>

    uint8_t setup_retr = (config->auto_retransmit_delay << 4) | (config->auto_retransmit_count & 0xf);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	799b      	ldrb	r3, [r3, #6]
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	b25a      	sxtb	r2, r3
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	795b      	ldrb	r3, [r3, #5]
 80028ac:	b25b      	sxtb	r3, r3
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	b25b      	sxtb	r3, r3
 80028b4:	4313      	orrs	r3, r2
 80028b6:	b25b      	sxtb	r3, r3
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	733b      	strb	r3, [r7, #12]
    nrf24_write_register(intf_ptr, NRF24_REGADDR_SETUP_RETR, &setup_retr, 1);
 80028bc:	f107 020c 	add.w	r2, r7, #12
 80028c0:	2301      	movs	r3, #1
 80028c2:	2104      	movs	r1, #4
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff fdc9 	bl	800245c <nrf24_write_register>
	return 0;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <nrf24_pipe_rx_start>:


int nrf24_pipe_rx_start(void * intf_ptr, uint8_t pipe_no, const nrf24_pipe_config_t * config)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	460b      	mov	r3, r1
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	72fb      	strb	r3, [r7, #11]
	uint8_t en_aa = 0 ;
 80028e2:	2300      	movs	r3, #0
 80028e4:	75bb      	strb	r3, [r7, #22]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_EN_AA, &en_aa, 1);
 80028e6:	f107 0216 	add.w	r2, r7, #22
 80028ea:	2301      	movs	r3, #1
 80028ec:	2101      	movs	r1, #1
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f7ff fd85 	bl	80023fe <nrf24_read_register>
	if (config->enable_auto_ack)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00b      	beq.n	8002914 <nrf24_pipe_rx_start+0x40>
	{
		en_aa |= (1 << pipe_no);
 80028fc:	7afb      	ldrb	r3, [r7, #11]
 80028fe:	2201      	movs	r2, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	b25a      	sxtb	r2, r3
 8002906:	7dbb      	ldrb	r3, [r7, #22]
 8002908:	b25b      	sxtb	r3, r3
 800290a:	4313      	orrs	r3, r2
 800290c:	b25b      	sxtb	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	75bb      	strb	r3, [r7, #22]
 8002912:	e00c      	b.n	800292e <nrf24_pipe_rx_start+0x5a>
	}
	else
	{
		en_aa &= ~(1 << pipe_no);
 8002914:	7afb      	ldrb	r3, [r7, #11]
 8002916:	2201      	movs	r2, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	b25b      	sxtb	r3, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	b25a      	sxtb	r2, r3
 8002922:	7dbb      	ldrb	r3, [r7, #22]
 8002924:	b25b      	sxtb	r3, r3
 8002926:	4013      	ands	r3, r2
 8002928:	b25b      	sxtb	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	75bb      	strb	r3, [r7, #22]
	}
	nrf24_write_register(intf_ptr, NRF24_REGADDR_EN_AA, &en_aa, 1);
 800292e:	f107 0216 	add.w	r2, r7, #22
 8002932:	2301      	movs	r3, #1
 8002934:	2101      	movs	r1, #1
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f7ff fd90 	bl	800245c <nrf24_write_register>

	uint8_t en_rxaddr = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	757b      	strb	r3, [r7, #21]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_EN_RXADDR, &en_rxaddr, 1);
 8002940:	f107 0215 	add.w	r2, r7, #21
 8002944:	2301      	movs	r3, #1
 8002946:	2102      	movs	r1, #2
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f7ff fd58 	bl	80023fe <nrf24_read_register>
	en_rxaddr |= (1 << pipe_no);
 800294e:	7afb      	ldrb	r3, [r7, #11]
 8002950:	2201      	movs	r2, #1
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	b25a      	sxtb	r2, r3
 8002958:	7d7b      	ldrb	r3, [r7, #21]
 800295a:	b25b      	sxtb	r3, r3
 800295c:	4313      	orrs	r3, r2
 800295e:	b25b      	sxtb	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	757b      	strb	r3, [r7, #21]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_EN_RXADDR, &en_rxaddr, 1);
 8002964:	f107 0215 	add.w	r2, r7, #21
 8002968:	2301      	movs	r3, #1
 800296a:	2102      	movs	r1, #2
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f7ff fd75 	bl	800245c <nrf24_write_register>

	uint8_t rx_pw = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	75fb      	strb	r3, [r7, #23]
	switch (pipe_no)
 8002976:	7afb      	ldrb	r3, [r7, #11]
 8002978:	2b05      	cmp	r3, #5
 800297a:	d851      	bhi.n	8002a20 <nrf24_pipe_rx_start+0x14c>
 800297c:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <nrf24_pipe_rx_start+0xb0>)
 800297e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002982:	bf00      	nop
 8002984:	0800299d 	.word	0x0800299d
 8002988:	080029b3 	.word	0x080029b3
 800298c:	080029c9 	.word	0x080029c9
 8002990:	080029df 	.word	0x080029df
 8002994:	080029f5 	.word	0x080029f5
 8002998:	08002a0b 	.word	0x08002a0b
	{
	case 0:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P0, (uint8_t *)(&config->address), 5);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f103 0208 	add.w	r2, r3, #8
 80029a2:	2305      	movs	r3, #5
 80029a4:	210a      	movs	r1, #10
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f7ff fd58 	bl	800245c <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P0;
 80029ac:	2311      	movs	r3, #17
 80029ae:	75fb      	strb	r3, [r7, #23]
		break;
 80029b0:	e036      	b.n	8002a20 <nrf24_pipe_rx_start+0x14c>
	case 1:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P1, (uint8_t *)(&config->address), 5);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f103 0208 	add.w	r2, r3, #8
 80029b8:	2305      	movs	r3, #5
 80029ba:	210b      	movs	r1, #11
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f7ff fd4d 	bl	800245c <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P1;
 80029c2:	2312      	movs	r3, #18
 80029c4:	75fb      	strb	r3, [r7, #23]
		break;
 80029c6:	e02b      	b.n	8002a20 <nrf24_pipe_rx_start+0x14c>
	case 2:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P2, ((uint8_t *)(&config->address) + 4), 1);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3308      	adds	r3, #8
 80029cc:	1d1a      	adds	r2, r3, #4
 80029ce:	2301      	movs	r3, #1
 80029d0:	210c      	movs	r1, #12
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f7ff fd42 	bl	800245c <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P2;
 80029d8:	2313      	movs	r3, #19
 80029da:	75fb      	strb	r3, [r7, #23]
		break;
 80029dc:	e020      	b.n	8002a20 <nrf24_pipe_rx_start+0x14c>
	case 3:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P3, ((uint8_t *)(&config->address) + 4), 1);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3308      	adds	r3, #8
 80029e2:	1d1a      	adds	r2, r3, #4
 80029e4:	2301      	movs	r3, #1
 80029e6:	210d      	movs	r1, #13
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f7ff fd37 	bl	800245c <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P3;
 80029ee:	2314      	movs	r3, #20
 80029f0:	75fb      	strb	r3, [r7, #23]
		break;
 80029f2:	e015      	b.n	8002a20 <nrf24_pipe_rx_start+0x14c>
	case 4:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P4, ((uint8_t *)(&config->address) + 4), 1);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3308      	adds	r3, #8
 80029f8:	1d1a      	adds	r2, r3, #4
 80029fa:	2301      	movs	r3, #1
 80029fc:	210e      	movs	r1, #14
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f7ff fd2c 	bl	800245c <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P4;
 8002a04:	2315      	movs	r3, #21
 8002a06:	75fb      	strb	r3, [r7, #23]
		break;
 8002a08:	e00a      	b.n	8002a20 <nrf24_pipe_rx_start+0x14c>
	case 5:
		nrf24_write_register(intf_ptr, NRF24_REGADDR_RX_ADDR_P5, ((uint8_t *)(&config->address) + 4), 1);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3308      	adds	r3, #8
 8002a0e:	1d1a      	adds	r2, r3, #4
 8002a10:	2301      	movs	r3, #1
 8002a12:	210f      	movs	r1, #15
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7ff fd21 	bl	800245c <nrf24_write_register>
		rx_pw = NRF24_REGADDR_RX_PW_P5;
 8002a1a:	2316      	movs	r3, #22
 8002a1c:	75fb      	strb	r3, [r7, #23]
		break;
 8002a1e:	bf00      	nop
	}

	uint8_t dynpd = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	753b      	strb	r3, [r7, #20]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_DYNPD, &dynpd, 1);
 8002a24:	f107 0214 	add.w	r2, r7, #20
 8002a28:	2301      	movs	r3, #1
 8002a2a:	211c      	movs	r1, #28
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f7ff fce6 	bl	80023fe <nrf24_read_register>
	if (config->payload_size >= 0)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	db15      	blt.n	8002a68 <nrf24_pipe_rx_start+0x194>
	{
		nrf24_write_register(intf_ptr, rx_pw, (uint8_t *)(&config->payload_size), 1);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f103 0210 	add.w	r2, r3, #16
 8002a42:	7df9      	ldrb	r1, [r7, #23]
 8002a44:	2301      	movs	r3, #1
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f7ff fd08 	bl	800245c <nrf24_write_register>
		dynpd &= ~(1 << pipe_no);
 8002a4c:	7afb      	ldrb	r3, [r7, #11]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	b25b      	sxtb	r3, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	b25a      	sxtb	r2, r3
 8002a5a:	7d3b      	ldrb	r3, [r7, #20]
 8002a5c:	b25b      	sxtb	r3, r3
 8002a5e:	4013      	ands	r3, r2
 8002a60:	b25b      	sxtb	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	753b      	strb	r3, [r7, #20]
 8002a66:	e013      	b.n	8002a90 <nrf24_pipe_rx_start+0x1bc>
	}
	else
	{
		uint8_t pld_size = 32; // Нужно записать не 0, чтобы пайп в целом работал
 8002a68:	2320      	movs	r3, #32
 8002a6a:	74fb      	strb	r3, [r7, #19]
		nrf24_write_register(intf_ptr, rx_pw, &pld_size, 1);
 8002a6c:	f107 0213 	add.w	r2, r7, #19
 8002a70:	7df9      	ldrb	r1, [r7, #23]
 8002a72:	2301      	movs	r3, #1
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f7ff fcf1 	bl	800245c <nrf24_write_register>
		dynpd |= (1 << pipe_no);
 8002a7a:	7afb      	ldrb	r3, [r7, #11]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	b25a      	sxtb	r2, r3
 8002a84:	7d3b      	ldrb	r3, [r7, #20]
 8002a86:	b25b      	sxtb	r3, r3
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	b25b      	sxtb	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	753b      	strb	r3, [r7, #20]
	}
	nrf24_write_register(intf_ptr, NRF24_REGADDR_DYNPD, &dynpd, 1);
 8002a90:	f107 0214 	add.w	r2, r7, #20
 8002a94:	2301      	movs	r3, #1
 8002a96:	211c      	movs	r1, #28
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7ff fcdf 	bl	800245c <nrf24_write_register>

	return 0;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <nrf24_mode_standby>:
	return 0;
}


int nrf24_mode_standby(void * intf_ptr)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	uint8_t config_reg = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 8002ab4:	f107 020f 	add.w	r2, r7, #15
 8002ab8:	2301      	movs	r3, #1
 8002aba:	2100      	movs	r1, #0
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff fc9e 	bl	80023fe <nrf24_read_register>
	config_reg |= NRF24_CONFIG_PWR_UP;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &config_reg, 1);
 8002acc:	f107 020f 	add.w	r2, r7, #15
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fcc1 	bl	800245c <nrf24_write_register>
	nrf24_ce_activate(intf_ptr, false);
 8002ada:	2100      	movs	r1, #0
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fdc2 	bl	8002666 <nrf24_ce_activate>
	return 0;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <nrf24_mode_rx>:
	return 0;
}


int nrf24_mode_rx(void * intf_ptr)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
	uint8_t mode_tx = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	73fb      	strb	r3, [r7, #15]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_CONFIG, &mode_tx, 1);
 8002af8:	f107 020f 	add.w	r2, r7, #15
 8002afc:	2301      	movs	r3, #1
 8002afe:	2100      	movs	r1, #0
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff fc7c 	bl	80023fe <nrf24_read_register>
	mode_tx |= NRF24_CONFIG_PRIM_RX;
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_CONFIG, &mode_tx, 1);
 8002b10:	f107 020f 	add.w	r2, r7, #15
 8002b14:	2301      	movs	r3, #1
 8002b16:	2100      	movs	r1, #0
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff fc9f 	bl	800245c <nrf24_write_register>
	nrf24_ce_activate(intf_ptr, true);
 8002b1e:	2101      	movs	r1, #1
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff fda0 	bl	8002666 <nrf24_ce_activate>
	return 0;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <nrf24_fifo_status>:
	return 0;
}


int nrf24_fifo_status(void * intf_ptr, nrf24_fifo_status_t * rx_status, nrf24_fifo_status_t * tx_status)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
	uint8_t fifo_satus = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	75fb      	strb	r3, [r7, #23]
	nrf24_read_register(intf_ptr, NRF24_REGADDR_FIFO_STATUS, &fifo_satus, 1);
 8002b40:	f107 0217 	add.w	r2, r7, #23
 8002b44:	2301      	movs	r3, #1
 8002b46:	2117      	movs	r1, #23
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f7ff fc58 	bl	80023fe <nrf24_read_register>

	*rx_status = NRF24_FIFO_NOT_EMPTY;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2201      	movs	r2, #1
 8002b52:	701a      	strb	r2, [r3, #0]
	if (((fifo_satus >> NRF24_FIFO_STATUS_RX_EMPTY_OFFSET) & NRF24_FIFO_STATUS_RX_EMPTY_MASK) == 1)
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <nrf24_fifo_status+0x34>
	{
		*rx_status = NRF24_FIFO_EMPTY;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
	}
	if (((fifo_satus >> NRF24_FIFO_STATUS_RX_FULL_OFFSET) & NRF24_FIFO_STATUS_RX_FULL_MASK) == 1)
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <nrf24_fifo_status+0x48>
	{
		*rx_status = NRF24_FIFO_FULL;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2202      	movs	r2, #2
 8002b76:	701a      	strb	r2, [r3, #0]
	}

	*tx_status = NRF24_FIFO_NOT_EMPTY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
	if (((fifo_satus >> NRF24_FIFO_STATUS_TX_EMPTY_OFFSET) & NRF24_FIFO_STATUS_TX_EMPTY_MASK) == 1)
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <nrf24_fifo_status+0x62>
	{
		*tx_status = NRF24_FIFO_EMPTY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
	}
	if (((fifo_satus >> NRF24_FIFO_STATUS_TX_FULL_OFFSET) & NRF24_FIFO_STATUS_TX_FULL_MASK) == 1)
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <nrf24_fifo_status+0x76>
	{
		*tx_status = NRF24_FIFO_FULL;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <nrf24_fifo_read>:


int nrf24_fifo_read(void * intf_ptr, uint8_t * packet_buffer, uint8_t packet_buffer_size)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	71fb      	strb	r3, [r7, #7]
	uint8_t payload_size = 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	75fb      	strb	r3, [r7, #23]
	nrf24_get_rx_payload_size(intf_ptr, &payload_size);
 8002bc2:	f107 0317 	add.w	r3, r7, #23
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f7ff fcf9 	bl	80025c0 <nrf24_get_rx_payload_size>
	if (payload_size > 0)
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <nrf24_fifo_read+0x30>
	{
		nrf24_read_rx_payload(intf_ptr, packet_buffer, packet_buffer_size);
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f7ff fc72 	bl	80024c4 <nrf24_read_rx_payload>
	}
	return payload_size;
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <nrf24_fifo_flush_tx>:
	}
}


int nrf24_fifo_flush_tx(void * intf_ptr)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
	nrf24_flush_tx(intf_ptr);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff fcc5 	bl	8002582 <nrf24_flush_tx>
	return 0;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <nrf24_fifo_flush_rx>:


int nrf24_fifo_flush_rx(void * intf_ptr)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
	nrf24_flush_rx(intf_ptr);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff fc9a 	bl	8002544 <nrf24_flush_rx>
	return 0;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <nrf24_irq_get>:
	return 0;
}


int nrf24_irq_get(void * intf_ptr, int * composition)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
	uint8_t status_reg = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	73fb      	strb	r3, [r7, #15]
	nrf24_get_status(intf_ptr, &status_reg);
 8002c28:	f107 030f 	add.w	r3, r7, #15
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff fcf7 	bl	8002622 <nrf24_get_status>
	*composition = (status_reg >> NRF24_STATUS_FLAG_OFFSET) & NRF24_STATUS_FLAG_MASK;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	f003 0207 	and.w	r2, r3, #7
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	601a      	str	r2, [r3, #0]
	return 0;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <nrf24_irq_clear>:


int nrf24_irq_clear(void * intf_ptr, int composition)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
	uint8_t status_reg = (composition & NRF24_STATUS_FLAG_MASK) << NRF24_STATUS_FLAG_OFFSET;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	73fb      	strb	r3, [r7, #15]
	nrf24_write_register(intf_ptr, NRF24_REGADDR_STATUS, &status_reg, 1);
 8002c64:	f107 020f 	add.w	r2, r7, #15
 8002c68:	2301      	movs	r3, #1
 8002c6a:	2107      	movs	r1, #7
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff fbf5 	bl	800245c <nrf24_write_register>
	return 0;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <__libc_init_array>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	4d0d      	ldr	r5, [pc, #52]	; (8002cb4 <__libc_init_array+0x38>)
 8002c80:	4c0d      	ldr	r4, [pc, #52]	; (8002cb8 <__libc_init_array+0x3c>)
 8002c82:	1b64      	subs	r4, r4, r5
 8002c84:	10a4      	asrs	r4, r4, #2
 8002c86:	2600      	movs	r6, #0
 8002c88:	42a6      	cmp	r6, r4
 8002c8a:	d109      	bne.n	8002ca0 <__libc_init_array+0x24>
 8002c8c:	4d0b      	ldr	r5, [pc, #44]	; (8002cbc <__libc_init_array+0x40>)
 8002c8e:	4c0c      	ldr	r4, [pc, #48]	; (8002cc0 <__libc_init_array+0x44>)
 8002c90:	f000 f820 	bl	8002cd4 <_init>
 8002c94:	1b64      	subs	r4, r4, r5
 8002c96:	10a4      	asrs	r4, r4, #2
 8002c98:	2600      	movs	r6, #0
 8002c9a:	42a6      	cmp	r6, r4
 8002c9c:	d105      	bne.n	8002caa <__libc_init_array+0x2e>
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca4:	4798      	blx	r3
 8002ca6:	3601      	adds	r6, #1
 8002ca8:	e7ee      	b.n	8002c88 <__libc_init_array+0xc>
 8002caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cae:	4798      	blx	r3
 8002cb0:	3601      	adds	r6, #1
 8002cb2:	e7f2      	b.n	8002c9a <__libc_init_array+0x1e>
 8002cb4:	08002d04 	.word	0x08002d04
 8002cb8:	08002d04 	.word	0x08002d04
 8002cbc:	08002d04 	.word	0x08002d04
 8002cc0:	08002d08 	.word	0x08002d08

08002cc4 <memset>:
 8002cc4:	4402      	add	r2, r0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d100      	bne.n	8002cce <memset+0xa>
 8002ccc:	4770      	bx	lr
 8002cce:	f803 1b01 	strb.w	r1, [r3], #1
 8002cd2:	e7f9      	b.n	8002cc8 <memset+0x4>

08002cd4 <_init>:
 8002cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd6:	bf00      	nop
 8002cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cda:	bc08      	pop	{r3}
 8002cdc:	469e      	mov	lr, r3
 8002cde:	4770      	bx	lr

08002ce0 <_fini>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	bf00      	nop
 8002ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce6:	bc08      	pop	{r3}
 8002ce8:	469e      	mov	lr, r3
 8002cea:	4770      	bx	lr
